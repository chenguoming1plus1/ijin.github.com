<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: events | @ijin]]></title>
  <link href="http://ijin.github.com/blog/categories/events/atom.xml" rel="self"/>
  <link href="http://ijin.github.com/"/>
  <updated>2012-12-03T21:05:10+09:00</updated>
  <id>http://ijin.github.com/</id>
  <author>
    <name><![CDATA[Michael H. Oshita]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ISUCON2に参加してきた]]></title>
    <link href="http://ijin.github.com/blog/2012/11/05/isucon2/"/>
    <updated>2012-11-05T21:58:00+09:00</updated>
    <id>http://ijin.github.com/blog/2012/11/05/isucon2</id>
    <content type="html"><![CDATA[<p>開催2年目となる<a href="http://blog.livedoor.jp/techblog/archives/67700199.html">ISUCON (Iikanjini Speed Up CONTEST)</a>に参加してきました。</p>

<p>結果は3位。</p>

<h3>事前準備</h3>

<p><a href="https://twitter.com/cads">@cads</a>と<a href="https://twitter.com/fruwe">@fruwe</a>に声をかけ、「Mr. Frank &amp; Co.」という米西独チームを編成。
去年のお題を見ると、簡単なブログサイト。実装はphp, python, perl, ruby, node.jsのいずれか。</p>

<ul>
<li>キャッシュ機構入れるんだったら、慣れてるrubyで実装できるようにrailsでスケルトンプロジェクトをgithubに作っておいてみんなで共有。</li>
<li>VarnishやResque/Sidekiq, Redisの復習をしてコード追加</li>
<li>試しに他のrubyバージョンのインストール</li>
<li>後はテスト用のec2インスタンスの用意。</li>
</ul>


<h3>お題発表</h3>

<p>「NHN48」と「はだいろクローバーZ」のチケット販売システムw。
お、似たようなシステム前作った事あるからいけるかな？セッション対応でもESI使えるからアドバンテージがあるかもと思ってみる。</p>

<h3>前半戦</h3>

<p>まずは、いつものようにバックアップして戻れるように、gitプロジェクトにも追加。</p>

<p>チームメイト2人にはソースコードを解析をしてもらいつつ、自分は現在の環境の把握とベンチマークを動かすところに集中。どうやら公開されている去年の構成と似た感じでsupervisorによって指定言語のwebアプリが動いている模様。</p>

<p>ひとまず指標となるベースが必要なので、デフォルトで動いているperl版で計ったら大体こんな感じでした。（Scoreが低い方が良い）</p>

<pre><code>Score:533093
Tickets:922
</code></pre>

<p>webとdbの負荷が両方高い事を確認。</p>

<p>SQLを見たらCOUNTしてるので、slot分割したcounterテーブルかredisを使えば速くなるよね、と指摘。フロントにキャッシュ入れたいので普段使っているVarnishサポートのlacquer gemがあるので、二人はRailsでの再実装を開始。</p>

<p>ちなみにアクセス分布はこんな感じでした。</p>

<p><div><script src='https://gist.github.com/4017160.js?file='></script>
<noscript><pre><code>$grep &quot;POST&quot; access_log  | wc -l
960
$ grep &quot;GET /js/&quot; access_log  | wc -l
1663
$ grep &quot;GET /css/&quot; access_log  | wc -l
1113
$ grep &quot;GET /images/&quot; access_log  | wc -l
539
$ grep &quot;GET /ticket/&quot; access_log  | wc -l
1561
$ grep &quot;GET /artist/&quot; access_log  | wc -l
1534
$ grep &quot;GET / &quot; access_log  | wc -l
1624</code></pre></noscript></div>
</p>

<p>perl版のスコアは分かったので、sinatraフレームワークを使ったruby版に変えてベンチマークを取ってみると、</p>

<pre><code>Score:10755528
Tickets:457
</code></pre>

<p>性能は約半分。遅いのは分かっていたけど、ジョブワーカーとキャッシュを使えば、対応コードの入ったRailsでもなんとかなるという思いで特に意に介さず。</p>

<p>ただ、unicornが50プロセスもあったので、さすがにこれは多いのでベンチをしつつ、いろいろ調整。
結局スコアが一番高かった10プロセスに落ち着く。ついでにrubyのGCを切ったりしたけど、目立った効果はなし。
まだ再実装中で時間もあり、そういえば速いという<a href="http://rubini.us/">rubinius</a>にしたらどうなんだろうと思い、<a href="http://puma.io/">puma</a>も入れてみたけどmysql2 gemが動かず断念。</p>

<p>DBのmy.cnfも見たけど、データ量の割には十分なパラメータだったので、commit毎のflushを変えたぐらい。</p>

<pre><code>innodb_flush_log_at_trx_commit = 0
</code></pre>

<p>また、いつでも使えるようにと、VarnishとRedisもインストールしておく。</p>

<p>次にデプロイ用のテストができるようにテスト用サーバに環境を用意しつつ、capistrano対応。</p>

<h3>後半戦</h3>

<p>再実装はブラウザからの見た目上は前半でほぼ出来上がっていて、後はベンチを通るかを確認して最適化を始めるというシナリオでした。
ところが、全然通らずここからハマることに。。</p>

<p><div><script src='https://gist.github.com/4017170.js?file='></script>
<noscript><pre><code>{&quot;No one tickets are rendered in /ticket/x&quot;:25}
{&quot;No one tickets are rendered in /ticket/x&quot;:20}
{&quot;No one tickets are rendered in /ticket/x&quot;:24}
{&quot;No one tickets are rendered in /ticket/x&quot;:21}
Main Bench:agent bench command execute error, code:1
GET failure response too many, success response: 87%</code></pre></noscript></div>
</p>

<p>表示エラーなのか遅いからなのか、原因が掴めず四苦八苦。
ベンチマークアプリは未公開なのでエラー内容を運営側に聞きつつ、アプリを修正。</p>

<p>その間、リバースプロクシをapacheからnginxに変えてimages/css/js等のstatic contentを直接配信するようにしたけど、あまり効果がなかったので元に戻す。
アプリ修正の度にベンチを走らせるので、別の作業で最適化の確認をとるのが大変でした。チーム内でcontext switchingの問題が発生！</p>

<p>そうこうしていると時間がどんどん流れ、残り1時間を切ったところでRailsを捨てる決断をする。
せめてキャッシュ入れて最適化しよういう事でVarnishを設定し始める。
そうするとスコアはぐんぐん伸びて行き、上位に食い込む。</p>

<pre><code>Score:180724
</code></pre>

<p>さらにESIを使えばもう一段跳ね上がるかもという思いでsinatraにコードを追加してテスト。
しかし、圧倒的に時間が足りず最後の1分半まで粘ったが断念。
最後に再起同時のアプリ起動ができる確認をして終了。</p>

<p>最終スコアは以下の通りでした。</p>

<pre><code>Score:216868
</code></pre>

<p>正直ダメかなと思っていたけど、3位という結果に驚きました。
チューニングが実質1時間未満の割にはまずまずかも知れないけど、残念感の方が強かったですね。</p>

<h3>反省点</h3>

<p>方向性の転換をもっと早く見極めるべきでした。後ちょっと、後ちょっとの思いでずるずる再実装にこだわったのが良くなくて、捨てる勇気を持てたらと。ジョブワーカーやRedis対応の案（とコード）はあったので後半戦直後にやっていたら優勝の可能性はあったかも。。。後の祭りですが。</p>

<p>ともあれ、非常に楽しかったのでまた来年参加してみたいと思います。
運営したNHNの方々、ありがとうございます＆お疲れ様でした！</p>

<h3>おまけ</h3>

<p>帰ってから<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんと平行して#soloconやってました。
直後に<a href="https://github.com/tagomoris/isucon2">公開</a>されたnode.jsで書かれたベンチマークが動かなくてもいろいろ修正したけど、良い勉強になりました。（今は対応版が再アップ済み）
chckerがrails版に対して失敗していたような箇所を見つけたので後日検証してみようと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第4回チューニンガソン(Tuningathon)で優勝してきた]]></title>
    <link href="http://ijin.github.com/blog/2012/07/03/tuningathon4/"/>
    <updated>2012-07-03T01:29:00+09:00</updated>
    <id>http://ijin.github.com/blog/2012/07/03/tuningathon4</id>
    <content type="html"><![CDATA[<p>3回目の参戦となる<a href="http://www.zusaar.com/event/312053">#tuningathon</a>で<a href="https://twitter.com/tnmt">@tnmt</a>さんと共に優勝してきました。</p>

<p>やった事は相方の<a href="http://blog.tnmt.info/2012/07/01/tuningathon4/">ブログに書かれて</a>いるので、補足。</p>

<h3>開演前</h3>

<p>朝起きると、やたらとアラートが飛んでいるので調べると、うるう秒のせいでサーバ達が高負荷状態に。
<a href="https://twitter.com/tnmt">@tnmt</a>さんも同じ原因で障害対応中で待ち合わせ時間には間に合わず、参加が危うい感じ。
自分の方はなんとか片付けて、ぎりぎり開演前に到着。</p>

<h3>お題発表</h3>

<p>前々からやって欲しかったRuby on Rails! で、Refinery CMSというブログのチューニング。<br/>
内心喜びました。</p>

<h3>前半戦</h3>

<p>作業開始前にはまず何よりもバックアップ。
いつでも環境を戻せるようにRailsのフォルダをコピーしてMySQLのdumpを取っておく。</p>

<p>速攻でrbenv + ruby-buildを入れて、rubyの最新バージョン（1.9.3-p194）をインストール。
ビルドの間、まずは環境把握。システムのパッケージ版ruby 1.8.7が入っている事を確認して、
設定フォルダ（tuningathon/config）配下をさらっと目を通す。
my.cnfも見て全然パラメータ設定されてないけど/var/lib/mysqlの容量をチェックしたらほぼ空なので、
ここのチューニングはあまり効果が望めずと判断。やるなら後回し。</p>

<p>ビルドが終えた頃にデフォルト状態のままで動かして、まずベースとなるベンチマーク。
大体こんな感じでした。</p>

<p><div><script src='https://gist.github.com/3038461.js?file='></script>
<noscript><pre><code>12 fetches, 9 max parallel, 45576 bytes, in 10 seconds
3798 mean bytes/connection
1.2 fetches/sec, 4557.6 bytes/sec
msecs/connect: 83.4978 mean, 1000.51 max, 0.044 min
msecs/first-response: 4880.63 mean, 6446.66 max, 2048.37 min
HTTP response codes:
  code 200 -- 12
Score: 2.439 (get=1.200, comment=1.239(2), check=1.000)</code></pre></noscript></div>
</p>

<p>topで見ると完全にrubyがCPUを専有しているので、まずそこから着手することに。</p>

<p>次にdevelopment.rbのキャッシュ周りのパラメータをいじる。
development modeだとソースの変更が即時反映・確認できるよう、毎回クラスをロードしているので遅いんです。</p>

<pre><code>config.cache_classes = true
config.action_controller.perform_caching = true
</code></pre>

<p>これでだけでスコアが倍に。</p>

<pre><code>Score: 5.255 (get=2.900, comment=2.355(3), check=1.000)
</code></pre>

<p>次にruby 1.9.3-p194で動かして計測し、6超え。</p>

<pre><code>Score: 6.102 (get=3.600, comment=2.502(3), check=1.000)
</code></pre>

<p>この頃にやっと相方が合流し、予めGoogle Docsに書いてあった作業ログを共有。
unicornへの置き換えを試しみる事に合意。
設定ファイルを作ってもらっている最中に、jrubyへの置き換えを試すが、
制約上Gemfileの変更が不可だった為、mysql2のgemを外す事ができずDB接続ができなかったので断念。</p>

<p>unicorn単体で動かすと9ぐらい出たので、worker数を変えたり、
unicorn_rails gemからRails 3で推奨されている素のunicorn gemを試したりして、16-21。</p>

<pre><code>Score: 16.205 (get=9.900, comment=6.305(7), check=1.000)
Score: 19.869 (get=13.000, comment=6.869(7), check=1.000)
Score: 21.812 (get=14.000, comment=7.812(8), check=1.000)
</code></pre>

<p>ベンチを取り続けると、commentがどんどん溜まって行くので
viewのrender時間が増えてスコアが落ちたりしたので、毎回DBを初期化したのとRailsを再起動する事によってスコアが安定しだす。</p>

<p>最後にrubyのガベージコレクションを切ったりして、この時点での自己ベストがこんな感じでした。</p>

<pre><code>Score: 29.733 (get=19.000, comment=10.733(11), check=1.000)
</code></pre>

<h3>後半戦</h3>

<p>rubyで出来そうなところは一通りやったので、次は前々から構想していた
Railsの前段にReverse Proxyを置く事にチャレンジ。Varnishを入れて設定し始める。</p>

<p>ちょうどこの時期にTL上で<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんが1000超えのスコアを呟きはじめるので、
なんらかのReverse Proxyを使ったんだと確信。</p>

<p>実はこの時、1000超えのスコアはこちらでも出てたけど、たまに1とか0が出る不安定さだったので、
呟きませんでした。（運営側に計測されなかったのは別port&lt;Varnishデフォルトの6081番>で試していたから）</p>

<p>後は黙々と設定をいじりつつ、相方に念の為DBのテーブルにインデックスを張ってもらったり、
ベンチマークスクリプトを解析してもらって、適切な設定を探るべく試行錯誤な感じ。</p>

<p>16時からの公式計測  段階ではまだスコアが安定してなかったので、ひとまず入賞が確実なrubyオンリーな構成で
2〜3回来るのを確認。その後、終了20分前になんとか安定したので一気にportを置き換えて、
DBを初期化し、railsを再起動して待ちかまえる。次の計測でそれまでトップだった<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんを逆転したようです。</p>

<p>まだ若干時間が余っていたので、Varnishのスレッド数等をいじったりして、17時終了の30秒前に設定を入れて再起動。
後から知ったのですが、この設定がどうやら効いたようで1番最後の計測でさらにスコアが跳ねた模様。
最終的なスコアは「<strong>1351.54</strong>」でした。</p>

<p>ちなみにローカル計測ベスト（3200.23）だとこんな感じだったけど、リモート経由だとネットワーク（？）がボトルネックになって
そこまで出ませんでした。</p>

<p><div><script src='https://gist.github.com/3038562.js?file='></script>
<noscript><pre><code>32005 fetches, 9 max parallel, 1.20014e+08 bytes, in 10.0008 seconds  
3749.86 mean bytes/connection 
3200.23 fetches/sec, 1.20004e+07 bytes/sec  
msecs/connect: 0.249777 mean, 64.577 max, 0.023 min 
msecs/first-response: 2.02407 mean, 1094.87 max, 0.188 min  
15156 bad byte counts
HTTP response codes:  
  code 200 -- 32005    
Score: 3203.969 (get=3200.244, comment=3.725(4), check=1.000)    </code></pre></noscript></div>
</p>

<p>varnishの設定ファイルはこんな感じ。
TTLを強制有効にして、POST後にいかにキャッシュクリアさせるかがポイント。
じゃないと、チェックの成功率の2乗でペナルティが課され、すごい勢いでスコアが減点されます。</p>

<p>/etc/sysconfig/varnish</p>

<h2><div><script src='https://gist.github.com/3038946.js?file='></script>
<noscript><pre><code>NFILES=131072
MEMLOCK=82000
RELOAD_VCL=1

DAEMON_OPTS=&quot;-a :3000 \
             -T :6082 \
             -f /etc/varnish/default.vcl \
             -t 120 \
             -S /etc/varnish/secret \
             -s malloc,64M \
             -p ban_lurker_sleep=0.01 \
             -p thread_pool_stack=262144 \
             -p thread_pool_add_delay=2 \
             -p thread_pools=2 \
             -p thread_pool_min=100 \
             -p thread_pool_max=200&quot;</code></pre></noscript></div>
</h2>

<p>/etc/varnish/default.vcl
<div><script src='https://gist.github.com/3038775.js?file='></script>
<noscript><pre><code># This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.
# 
# Default backend definition.  Set this to point to your content
# server.
# 
backend default {
  .host = &quot;127.0.0.1&quot;;
  .port = &quot;3001&quot;;
}
# 
# Below is a commented-out copy of the default VCL logic.  If you
# redefine any of these subroutines, the built-in logic will be
# appended to your code.
# sub vcl_recv {
#     if (req.restarts == 0) {
# 	if (req.http.x-forwarded-for) {
# 	    set req.http.X-Forwarded-For =
# 		req.http.X-Forwarded-For + &quot;, &quot; + client.ip;
# 	} else {
# 	    set req.http.X-Forwarded-For = client.ip;
# 	}
#     }
#     if (req.request != &quot;GET&quot; &amp;&amp;
#       req.request != &quot;HEAD&quot; &amp;&amp;
#       req.request != &quot;PUT&quot; &amp;&amp;
#       req.request != &quot;POST&quot; &amp;&amp;
#       req.request != &quot;TRACE&quot; &amp;&amp;
#       req.request != &quot;OPTIONS&quot; &amp;&amp;
#       req.request != &quot;DELETE&quot;) {
#         /* Non-RFC2616 or CONNECT which is weird. */
#         return (pipe);
#     }
#     if (req.request != &quot;GET&quot; &amp;&amp; req.request != &quot;HEAD&quot;) {
#         /* We only deal with GET and HEAD by default */
#         return (pass);
#     }
#     if (req.http.Authorization || req.http.Cookie) {
#         /* Not cacheable by default */
#         return (pass);
#     }
#     return (lookup);
# }
sub vcl_recv {
    if (req.request == &quot;POST&quot;) {
	ban(&quot;req.url ~ /&quot;);
	return(pass);
    }
}

# 
# sub vcl_pipe {
#     # Note that only the first request to the backend will have
#     # X-Forwarded-For set.  If you use X-Forwarded-For and want to
#     # have it set for all requests, make sure to have:
#     # set bereq.http.connection = &quot;close&quot;;
#     # here.  It is not set by default as it might break some broken web
#     # applications, like IIS with NTLM authentication.
#     return (pipe);
# }
# 
# sub vcl_pass {
#     return (pass);
# }
# 
# sub vcl_hash {
#     hash_data(req.url);
#     if (req.http.host) {
#         hash_data(req.http.host);
#     } else {
#         hash_data(server.ip);
#     }
#     return (hash);
# }
# 
# sub vcl_hit {
#     return (deliver);
# }
# 
# sub vcl_miss {
#     return (fetch);
# }
# 
# sub vcl_fetch {
#     if (beresp.ttl &lt;= 0s ||
#         beresp.http.Set-Cookie ||
#         beresp.http.Vary == &quot;*&quot;) {
# 		/*
# 		 * Mark as &quot;Hit-For-Pass&quot; for the next 2 minutes
# 		 */
# 		set beresp.ttl = 120 s;
# 		return (hit_for_pass);
#     }
#     return (deliver);
# }
sub vcl_fetch {
    if (beresp.ttl &lt;= 0s) {
	set beresp.ttl = 120s;
    }
}

# 
# sub vcl_deliver {
#     return (deliver);
# }
sub vcl_deliver {
    if (obj.hits &gt; 0) {
        set resp.http.X-Cache = &quot;HIT&quot;;
    } else {
        set resp.http.X-Cache = &quot;MISS&quot;;
    }
}
# 
# sub vcl_error {
#     set obj.http.Content-Type = &quot;text/html; charset=utf-8&quot;;
#     set obj.http.Retry-After = &quot;5&quot;;
#     synthetic {&quot;
# &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
# &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
#  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
# &lt;html&gt;
#   &lt;head&gt;
#     &lt;title&gt;&quot;} + obj.status + &quot; &quot; + obj.response + {&quot;&lt;/title&gt;
#   &lt;/head&gt;
#   &lt;body&gt;
#     &lt;h1&gt;Error &quot;} + obj.status + &quot; &quot; + obj.response + {&quot;&lt;/h1&gt;
#     &lt;p&gt;&quot;} + obj.response + {&quot;&lt;/p&gt;
#     &lt;h3&gt;Guru Meditation:&lt;/h3&gt;
#     &lt;p&gt;XID: &quot;} + req.xid + {&quot;&lt;/p&gt;
#     &lt;hr&gt;
#     &lt;p&gt;Varnish cache server&lt;/p&gt;
#   &lt;/body&gt;
# &lt;/html&gt;
# &quot;};
#     return (deliver);
# }
# 
# sub vcl_init {
# 	return (ok);
# }
# 
# sub vcl_fini {
# 	return (ok);
# }
</code></pre></noscript></div>
</p>

<p>世に出てるの設定例はVarnish 2系が多いので、3系はsyntaxが違うので注意。
コメントアウトされたコードはデフォルト挙動なので、記述されたのとマージされます。
<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんの<a href="http://netmark.jp/2012/07/tuningathon-4.html">設定</a>はvcl_fetch()内でキャッシュクリアしてるけど、
Varnishの<a href="https://www.varnish-software.com/static/book/_images/vcl.png">フロー</a>的には
一番最初に呼ばれるvcl_recv()内でやった方がより効果的です。</p>

<h3>まとめ</h3>

<ul>
<li>Railsは比較的遅いので、いかにヒットさせないかを考える</li>
<li>でもRubyのチューニングも重要。多分これが2位との差</li>
<li>ベンチマークスクリプトをよく読んで動きやスコアリングを把握する</li>
<li>運営側はチャレンジングな事は先にやっておけと推奨していたけど、まず堅実なチューニングをして最後の冒険が良いかと。</li>
<li>最後まで諦めない気持ち</li>
</ul>


<h3>おまけ</h3>

<p>翌日、出社したら何故か優勝記念と称してMountain Dewが10本贈呈されてましたw</p>

<p><img src="http://s1-05.twitpicproxy.com/photos/large/610358637.jpg" alt="tuningathon優勝記念" /></p>

<p>最後に運営の皆様、ありがとうございました！</p>
]]></content>
  </entry>
  
</feed>
