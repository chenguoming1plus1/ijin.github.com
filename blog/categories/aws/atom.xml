<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | @ijin]]></title>
  <link href="http://ijin.github.io/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://ijin.github.io/"/>
  <updated>2016-11-09T17:04:11+09:00</updated>
  <id>http://ijin.github.io/</id>
  <author>
    <name><![CDATA[Michael H. Oshita]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS GameDay Japan 2016を開催してきた]]></title>
    <link href="http://ijin.github.io/blog/2016/07/29/aws-gameday-japan-2016/"/>
    <updated>2016-07-29T15:41:00+09:00</updated>
    <id>http://ijin.github.io/blog/2016/07/29/aws-gameday-japan-2016</id>
    <content type="html"><![CDATA[<p>過去に何回も参加・開催両方を経験した事がある<a href="http://gameday-japan.connpass.com/event/33531/">AWS GameDay</a>に、またしても運営側として関わりました。</p>

<p>お題は基本的に<a href="/blog/2015/10/26/aws-re-invent-2015/">去年のre:Inventでやった</a>のを若干チューニングしたやつ。
詳細は今後また別のところで開催される可能性があるので、その時の参加者の為に伏せておきます。</p>

<h3>当日</h3>

<p>競技中はそれぞれのチームのスコアがリアルタイムで見れるダッシュボードがあって白熱した様子が伝わってました。</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">みんないろいろ実験中 <a href="https://twitter.com/hashtag/AWSGameDayJapan?src=hash">#AWSGameDayJapan</a> <a href="https://t.co/D2rIlhRV5T">pic.twitter.com/D2rIlhRV5T</a></p>&mdash; Michael H. Oshita (@ijin) <a href="https://twitter.com/ijin/status/756717339312164864">July 23, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>

<p>これはこれで楽しいんですが、何かが足りない感じ。。。</p>

<br >


<br >


<br >


<br >


<br >


<p>そう、<strong>グラフ</strong>です！!</p>

<br >


<br >


<br >


<br >


<br >


<p>参加チームの白熱したバトル（順位の入れ替え等）を時系列で表示し、戦いの軌跡をビジュアライズするアレです。ISUCONでもよく見慣れたあの遷移するグラフがなかったのです！</p>

<p>開始してから気づきました。。</p>

<h1>なので作りました</h1>

<h2>Graphing premiere</h2>

<p>ダッシュボードの作りを見てみると <code>jQuery</code> と <code>React.js</code> を使っている模様。ならば、どこかでendpointを叩いてjsonを取得しているはずなので、いろいろ探したところ、それらしいのがありました。</p>

<p>```javascript
  getScores: function() {</p>

<pre><code>$.ajax({
  url: 'https://xxxxxxxxx.execute-api.us-west-2.amazonaws.com/prod/scores',
  dataType: 'json',
  cache: false,
  success: function(data) {
    this.setState({data: data});
  }.bind(this),
  error: function(xhr, status, err) {
    console.error("scores", status, err.toString());
  }.bind(this)
});
</code></pre>

<p>  },
```</p>

<p>こうなれば話は簡単で後は返却されるjsonを解析して、定期的にcallしてplotしていけば良いだけです。</p>

<h3>データ送信</h3>

<p>グラフを描画するサーバを用意するのはしんどいので、カスタムメトリックスが作成できる監視サービスを使いました。
最初は<a href="https://mackerel.io">Mackerel</a>をと思ったけど、独自グラフを一般公開する設定がなさそうだったので<a href="https://www.datadoghq.com">Datadog</a>を採用。</p>

<p>Datadogでカスタムメトリックスを送るにはAPIを直接叩くよりは、<a href="http://docs.datadoghq.com/guides/metrics/">StatsD経由で送信</a>した方が楽なのでrubyでサクっと適当に記述。</p>

<p><code>ruby gameday.rb
statsd.batch do |s|
  s.gauge('gameday2016', scores[0]['Profit']*100, :tags =&gt; ["team:" + scores[0]['Team']])
  s.gauge('gameday2016', scores[1]['Profit']*100, :tags =&gt; ["team:" + scores[1]['Team']])
  s.gauge('gameday2016', scores[2]['Profit']*100, :tags =&gt; ["team:" + scores[2]['Team']])
  # etc
end
</code></p>

<h3>グラフ描画</h3>

<p>公開ダッシュボードを作成するには <code>TimeBoard</code> ではなく <code>ScreenBoard</code> を選択し、後は必要そうなグラフを追加していくだけ。</p>

<p>グラフ自体はGUIで作っても良いし、jsonで記述可能なので結構柔軟で素敵です。</p>

<p>``` json profits.json
{
  "viz": "timeseries",
  "requests": [</p>

<pre><code>{
  "q": "avg:gameday2016{*} by {team}",
  "aggregator": "avg",
  "conditional_formats": [],
  "type": "line"
}
</code></pre>

<p>  ]
}
```</p>

<p>``` json ranking.json
{
  "viz": "toplist",
  "requests": [</p>

<pre><code>{
  "q": "top(avg:gameday2016{*} by {team}, 20, 'last', 'desc')",
  "style": {
    "palette": "dog_classic"
  },
  "conditional_formats": [
    {
      "palette": "white_on_green",
      "comparator": "&gt;=",
      "value": 0
    },
    {
      "palette": "white_on_red",
      "comparator": "&lt;",
      "value": 0
    }
  ]
}
</code></pre>

<p>  ]
}
```</p>

<p>できあがったグラフはこんな感じ。
高負荷発生等のイベント時の対応との比較もできて見やすいと思います。</p>

<p><img src="https://lh3.googleusercontent.com/XoNcTN3HQIlFDHvaSe8uNlcCP8FYRijZNsPVdrnrsmNvEF3XoW6IUDKnU63JDLL7X6W3Ed3mCLaF=w742-h394-no"></p>

<p>これで各チームのポジション等を伝えやすくなりました。</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">お、チームshoroumaruが逆転！ <a href="https://twitter.com/hashtag/AWSGameDayJapan?src=hash">#AWSGameDayJapan</a> <a href="https://t.co/kr0oSRgcIj">pic.twitter.com/kr0oSRgcIj</a></p>&mdash; Michael H. Oshita (@ijin) <a href="https://twitter.com/ijin/status/756756052192792576">July 23, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>
<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">チームshorumaruが独走中 <a href="https://twitter.com/hashtag/AWSGameDayJapan?src=hash">#AWSGameDayJapan</a> <a href="https://t.co/0HPTJk6Myh">pic.twitter.com/0HPTJk6Myh</a></p>&mdash; Michael H. Oshita (@ijin) <a href="https://twitter.com/ijin/status/756766379341025281">July 23, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>
<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">スコアとグラフ <a href="https://twitter.com/ijin">@ijin</a> チームshoroumaruが圧倒的な差をつけて優勝！ <a href="https://twitter.com/hashtag/AWSGameDayJapan?src=hash">#AWSGameDayJapan</a> <a href="https://t.co/Cs1xd506oE">pic.twitter.com/Cs1xd506oE</a></p>&mdash; Michael H. Oshita (@ijin) <a href="https://twitter.com/ijin/status/756778321749225472">July 23, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>

<p>というわけで優勝した<a href="http://inokara.hateblo.jp/entry/2016/07/24/095228">チーム初老丸</a>、おめでとうございます！</p>

<h3>終わりに</h3>

<p>今回は競技の途中から実装しちゃったので次回は最初から用意しておきたいと思います。</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">isuconの試合途中結果を勝手にdatadogに流してるやつwwwwwwwwwwwww <a href="https://t.co/CXDO15vV68">https://t.co/CXDO15vV68</a> <a href="https://twitter.com/hashtag/isucon?src=hash">#isucon</a></p>&mdash; そらは (@sora_h) <a href="https://twitter.com/sora_h/status/660379055867334656">October 31, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>
（※）実は去年のISUCONの時も似たような事をやってましたね。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TerraformでAPI Gatewway]]></title>
    <link href="http://ijin.github.io/blog/2016/04/28/terraforming-api-gatewways/"/>
    <updated>2016-04-28T18:01:00+09:00</updated>
    <id>http://ijin.github.io/blog/2016/04/28/terraforming-api-gatewways</id>
    <content type="html"><![CDATA[<p>つい先日、<a href="https://terraform.io/">Terraform</a>でずっと気になっていたAmazon API Gatewayの<code>selection_pattern</code>の<a href="https://github.com/hashicorp/terraform/pull/5893">pull request</a>がmergeされました。</p>

<p>今まではAPI GWをInfrastructure As Codeで構築するにあたって複数のintegration responseパターンを返却できないのがネックだったのが、これでようやく解決。途中までTerraformで作って、その後に以下のようにawscliで追加するというちょっと煩わしい手順でした。</p>

<p><code>
REST_ID=$(aws apigateway get-rest-apis --query 'items[?name==`my_api`].id' --output text)
RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $REST_ID --query 'items[?path==`/my_path`].id' --output text)
aws apigateway put-integration-response --rest-api-id $REST_ID --resource-id $RESOURCE_ID --http-method GET --status-code 400 --response-templates '{"application/json": "$input.path('$').errorMessage"}' --selection-pattern "[^0-9](.|\n)*"
</code></p>

<p>というわけで、早速実験。お題は以前<a href="/blog/2015/11/04/elastic-beanstalk-easy-ssh/">紹介した</a>Elastic Beanstalk ssh用のAPI GWで。</p>

<h3>Terraform version</h3>

<p>まずは、<code>master</code>にmergeされた開発版Terraformのビルド。やり方は<a href="/blog/2016/03/31/using-terraform-dev-versions/">こちら</a>。</p>

<p><code>
$ terraform version
Terraform v0.6.16-dev - 5cd27c2
</code></p>

<h3>Terraform file</h3>

<p>API GWのterraform化はこんな感じで。</p>

<p><div><script src='https://gist.github.com/db027846fefb339187e3f2833fe2d034.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>(*) permissionはlambda作成後に許可</p>

<h3>Terraform plan/apply</h3>

<p>```
$ terraform plan
Refreshing Terraform state prior to plan...</p>

<p>The Terraform execution plan has been generated and is shown below.
Resources are shown in alphabetical order for quick scanning. Green resources
will be created (or destroyed and then created if an existing resource
exists), yellow resources are being changed in-place, and red resources
will be destroyed.</p>

<p>Note: You didn't specify an "-out" parameter to save this plan, so when
"apply" is called, Terraform can't guarantee this is what will execute.</p>

<ul>
<li><p>aws_api_gateway_deployment.eb_deployment
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"
  stage_name:  "" => "prod"</p></li>
<li><p>aws_api_gateway_integration.ip_get
  http_method:                        "" => "GET"
  integration_http_method:            "" => "POST"
  request_templates.#:                "" => "1"
  request_templates.application/json: "" => "{ \"env_name\": \"$input.params('env_name')\" }"
  resource_id:                        "" => "${aws_api_gateway_resource.ip.id}"
  rest_api_id:                        "" => "${aws_api_gateway_rest_api.EB.id}"
  type:                               "" => "AWS"
  uri:                                "" => "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:123456789012:function:eb_ip/invocations"</p></li>
<li><p>aws_api_gateway_integration.server_num_get
  http_method:                        "" => "GET"
  integration_http_method:            "" => "POST"
  request_templates.#:                "" => "1"
  request_templates.application/json: "" => "{\n \"env_name\": \"$input.params('env_name')\",\n \"server_num\": \"$input.params('server_num')\" \n}"
  resource_id:                        "" => "${aws_api_gateway_resource.server_num.id}"
  rest_api_id:                        "" => "${aws_api_gateway_rest_api.EB.id}"
  type:                               "" => "AWS"
  uri:                                "" => "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:123456789012:function:eb_ip/invocations"</p></li>
<li><p>aws_api_gateway_integration_response.ip_get_200
  http_method:                         "" => "GET"
  resource_id:                         "" => "${aws_api_gateway_resource.ip.id}"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$')"
  rest_api_id:                         "" => "${aws_api_gateway_rest_api.EB.id}"
  status_code:                         "" => "200"</p></li>
<li><p>aws_api_gateway_integration_response.ip_get_400
  http_method:                         "" => "GET"
  resource_id:                         "" => "${aws_api_gateway_resource.ip.id}"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$').errorMessage"
  rest_api_id:                         "" => "${aws_api_gateway_rest_api.EB.id}"
  selection_pattern:                   "" => "<a href=".|\n">^0-9</a>*"
  status_code:                         "" => "400"</p></li>
<li><p>aws_api_gateway_integration_response.server_num_get_200
  http_method:                         "" => "GET"
  resource_id:                         "" => "${aws_api_gateway_resource.server_num.id}"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$')"
  rest_api_id:                         "" => "${aws_api_gateway_rest_api.EB.id}"
  status_code:                         "" => "200"</p></li>
<li><p>aws_api_gateway_integration_response.server_num_get_400
  http_method:                         "" => "GET"
  resource_id:                         "" => "${aws_api_gateway_resource.server_num.id}"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$').errorMessage"
  rest_api_id:                         "" => "${aws_api_gateway_rest_api.EB.id}"
  selection_pattern:                   "" => "<a href=".|\n">^0-9</a>*"
  status_code:                         "" => "400"</p></li>
<li><p>aws_api_gateway_method.ip_get
  api_key_required: "" => "0"
  authorization:    "" => "NONE"
  http_method:      "" => "GET"
  resource_id:      "" => "${aws_api_gateway_resource.ip.id}"
  rest_api_id:      "" => "${aws_api_gateway_rest_api.EB.id}"</p></li>
<li><p>aws_api_gateway_method.server_num_get
  api_key_required: "" => "0"
  authorization:    "" => "NONE"
  http_method:      "" => "GET"
  api_key_required: "" => "0"
  authorization:    "" => "NONE"
  http_method:      "" => "GET"
  resource_id:      "" => "${aws_api_gateway_resource.server_num.id}"
  rest_api_id:      "" => "${aws_api_gateway_rest_api.EB.id}"</p></li>
<li><p>aws_api_gateway_method_response.ip_200
  http_method: "" => "GET"
  resource_id: "" => "${aws_api_gateway_resource.ip.id}"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"
  status_code: "" => "200"</p></li>
<li><p>aws_api_gateway_method_response.ip_400
  http_method: "" => "GET"
  resource_id: "" => "${aws_api_gateway_resource.ip.id}"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"
  status_code: "" => "400"</p></li>
<li><p>aws_api_gateway_method_response.server_num_200
  http_method: "" => "GET"
  resource_id: "" => "${aws_api_gateway_resource.server_num.id}"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"
  status_code: "" => "200"</p></li>
<li><p>aws_api_gateway_method_response.server_num_400
  http_method: "" => "GET"
  resource_id: "" => "${aws_api_gateway_resource.server_num.id}"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"
  status_code: "" => "400"</p></li>
<li><p>aws_api_gateway_resource.eb
  parent_id:   "" => "${aws_api_gateway_rest_api.EB.root_resource_id}"
  path:        "" => "<computed>"
  path_part:   "" => "eb"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"</p></li>
<li><p>aws_api_gateway_resource.env_name
  parent_id:   "" => "${aws_api_gateway_resource.eb.id}"
  path:        "" => "<computed>"
  path_part:   "" => "{env_name}"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"</p></li>
<li><p>aws_api_gateway_resource.ip
  parent_id:   "" => "${aws_api_gateway_resource.env_name.id}"
  path:        "" => "<computed>"
  path_part:   "" => "ip"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"</p></li>
<li><p>aws_api_gateway_resource.server_num
  parent_id:   "" => "${aws_api_gateway_resource.ip.id}"
  path:        "" => "<computed>"
  path_part:   "" => "{server_num}"
  rest_api_id: "" => "${aws_api_gateway_rest_api.EB.id}"</p></li>
<li><p>aws_api_gateway_rest_api.EB
  description:      "" => "get EB info"
  name:             "" => "EB"
  root_resource_id: "" => "<computed>"</p></li>
</ul>


<p>Plan: 18 to add, 0 to change, 0 to destroy.
```</p>

<p>```
$ terraform apply
aws_api_gateway_rest_api.EB: Creating...
  description:      "" => "get EB info"
  name:             "" => "EB"
  root_resource_id: "" => "<computed>"
aws_api_gateway_rest_api.EB: Creation complete
aws_api_gateway_resource.eb: Creating...
  parent_id:   "" => "k9x3d7qlhd"
  path:        "" => "<computed>"
  path_part:   "" => "eb"
  rest_api_id: "" => "mdsyn3w42a"
aws_api_gateway_resource.eb: Creation complete
aws_api_gateway_resource.env_name: Creating...
  parent_id:   "" => "nr2lkm"
  path:        "" => "<computed>"
  path_part:   "" => "{env_name}"
  rest_api_id: "" => "mdsyn3w42a"
aws_api_gateway_resource.env_name: Creation complete
aws_api_gateway_resource.ip: Creating...
  parent_id:   "" => "g29h7n"
  path:        "" => "<computed>"
  path_part:   "" => "ip"
  rest_api_id: "" => "mdsyn3w42a"
aws_api_gateway_resource.ip: Creation complete
aws_api_gateway_resource.server_num: Creating...
  parent_id:   "" => "sthj28"
  path:        "" => "<computed>"
  path_part:   "" => "{server_num}"
  rest_api_id: "" => "mdsyn3w42a"
aws_api_gateway_method.ip_get: Creating...
  api_key_required: "" => "0"
  authorization:    "" => "NONE"
  http_method:      "" => "GET"
  resource_id:      "" => "sthj28"
  rest_api_id:      "" => "mdsyn3w42a"
aws_api_gateway_method.ip_get: Creation complete
aws_api_gateway_method_response.ip_200: Creating...
  http_method: "" => "GET"
  resource_id: "" => "sthj28"
  rest_api_id: "" => "mdsyn3w42a"
  status_code: "" => "200"
aws_api_gateway_integration.ip_get: Creating...
  http_method:                        "" => "GET"
  integration_http_method:            "" => "POST"
  request_templates.#:                "" => "1"
  request_templates.application/json: "" => "{ \"env_name\": \"$input.params('env_name')\" }"
  resource_id:                        "" => "sthj28"
  rest_api_id:                        "" => "mdsyn3w42a"
  type:                               "" => "AWS"
  uri:                                "" => "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:123456789012:function:eb_ip/invocations"
aws_api_gateway_resource.server_num: Creation complete
aws_api_gateway_method.server_num_get: Creating...
  api_key_required: "" => "0"
  authorization:    "" => "NONE"
  http_method:      "" => "GET"
  resource_id:      "" => "9w68fs"
  rest_api_id:      "" => "mdsyn3w42a"
aws_api_gateway_method_response.ip_200: Creation complete
aws_api_gateway_method_response.ip_400: Creating...
  http_method: "" => "GET"
  resource_id: "" => "sthj28"
  rest_api_id: "" => "mdsyn3w42a"
  status_code: "" => "400"
aws_api_gateway_integration_response.ip_get_200: Creating...
  http_method:                         "" => "GET"
  resource_id:                         "" => "sthj28"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$')"
  rest_api_id:                         "" => "mdsyn3w42a"
  status_code:                         "" => "200"
aws_api_gateway_integration.ip_get: Creation complete
aws_api_gateway_method.server_num_get: Creation complete
aws_api_gateway_method_response.server_num_200: Creating...
  http_method: "" => "GET"
  resource_id: "" => "9w68fs"
  rest_api_id: "" => "mdsyn3w42a"
  status_code: "" => "200"
aws_api_gateway_integration.server_num_get: Creating...
  http_method:                        "" => "GET"
  integration_http_method:            "" => "POST"
  request_templates.#:                "" => "1"
  request_templates.application/json: "" => "{\n \"env_name\": \"$input.params('env_name')\",\n \"server_num\": \"$input.params('server_num')\" \n}"
  resource_id:                        "" => "9w68fs"
  rest_api_id:                        "" => "mdsyn3w42a"
  type:                               "" => "AWS"
  uri:                                "" => "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:123456789012:function:eb_ip/invocations"
aws_api_gateway_integration_response.ip_get_200: Creation complete
aws_api_gateway_method_response.ip_400: Creation complete
aws_api_gateway_integration_response.ip_get_400: Creating...
  http_method:                         "" => "GET"
  resource_id:                         "" => "sthj28"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$').errorMessage"
  rest_api_id:                         "" => "mdsyn3w42a"
  selection_pattern:                   "" => "<a href=".|\n">^0-9</a><em>"
  status_code:                         "" => "400"
aws_api_gateway_integration.server_num_get: Creation complete
aws_api_gateway_method_response.server_num_200: Creation complete
aws_api_gateway_method_response.server_num_400: Creating...
  http_method: "" => "GET"
  resource_id: "" => "9w68fs"
  rest_api_id: "" => "mdsyn3w42a"
  status_code: "" => "400"
aws_api_gateway_method_response.server_num_400: Creation complete
aws_api_gateway_integration_response.ip_get_400: Creation complete
aws_api_gateway_integration_response.server_num_get_200: Creating...
  http_method:                         "" => "GET"
  resource_id:                         "" => "9w68fs"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$')"
  rest_api_id:                         "" => "mdsyn3w42a"
  status_code:                         "" => "200"
aws_api_gateway_integration_response.server_num_get_200: Creation complete
aws_api_gateway_integration_response.server_num_get_400: Creating...
  http_method:                         "" => "GET"
  resource_id:                         "" => "9w68fs"
  response_templates.#:                "" => "1"
  response_templates.application/json: "" => "$input.path('$').errorMessage"
  rest_api_id:                         "" => "mdsyn3w42a"
  selection_pattern:                   "" => "<a href=".|\n">^0-9</a></em>"
  status_code:                         "" => "400"
aws_api_gateway_integration_response.server_num_get_400: Creation complete
aws_api_gateway_deployment.eb_deployment: Creating...
  rest_api_id: "" => "mdsyn3w42a"
  stage_name:  "" => "prod"
aws_api_gateway_deployment.eb_deployment: Creation complete</p>

<p>Apply complete! Resources: 18 added, 0 changed, 0 destroyed.</p>

<p>The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the <code>terraform show</code> command.</p>

<p>State path: terraform.tfstate
```</p>

<p>できた！</p>

<h3>考察</h3>

<ul>
<li>依存関係</li>
</ul>


<p>リソースを作成するのに並列処理が出来なかったり、依存関係がまだうまく対応できてないので、<code>depends_on</code>を駆使する必要があるのが若干まだ面倒。ない場合は、<code>BadRequestException: Unable to complete operation due to concurrent modification. Please try again later</code>や<code>BadRequestException: No integration defined for method status code: 400</code>等のエラーが発生する。</p>

<ul>
<li>Integration/Method Response Headers</li>
</ul>


<p>CORS等の設定するする際には<code>Access-Control-Allow-Origin</code>等のヘッダーをMethodやIntegrationのResponse Headerに設定をする必要があるけど、<code>.</code>の扱い問題で未対応（<a href="https://github.com/hashicorp/terraform/issues/2143">#2143</a>）。それまではawscliで以下のようにすると事で回避。</p>

<p><code>
aws apigateway update-integration-response --rest-api-id $rest_id --resource-id $appo_resource_id --http-method OPTIONS --status-code 200 --patch-operations op=add,path="/responseParameters/method.response.header.Access-Control-Allow-Headers",value="\"'Content-Type,X-Amz-Date,Authorization,X-Api-Key, Access-Control-Allow-Origin, x-amz-security-token'\""
</code></p>

<p>Issueはこの前上げたので（<a href="https://github.com/hashicorp/terraform/issues/6092">#6092</a>）、ウォッチしておくと良い。</p>

<ul>
<li>Infrastructure as Code</li>
</ul>


<p>API Gatewayは<code>resource</code>, <code>method</code>, <code>integration</code>, <code>method response</code>、<code>integration response</code>等を記述しないといけないので、どうしてもコードが多くになってしまう事からSwaggerでやった方が楽だったりするかも。ただ、その場合は<strong>Infrastructure as YAML</strong>になってしまうけど。。また、YAMLは整形してからimportする必要があったりするので、その辺は諸々トレードオフかなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LambdaでSSHやGitを使ってみよう]]></title>
    <link href="http://ijin.github.io/blog/2016/02/18/ssh-and-git-on-aws-lambda/"/>
    <updated>2016-02-18T12:35:00+09:00</updated>
    <id>http://ijin.github.io/blog/2016/02/18/ssh-and-git-on-aws-lambda</id>
    <content type="html"><![CDATA[<p>AWS Lambda上で<code>ssh</code>や<code>git</code>を使えたら便利！思ったけど、そもそもバイナリ自体が入ってない上にパッケージのインストールが出来ないので回避方法を悩んでいたところ、幸いそれぞれPython nativeの実装があったので先人の肩に乗っかる事で事無きを得ました。</p>

<h2>SSH</h2>

<p>SSHは<a href="http://www.paramiko.org">Paramiko</a>というライブラリを利用。s3上に<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">SSE-KMS</a>で暗号化されたキーファイルをダウンロードし、それを使ってサーバと認証しログイン。</p>

<p>注意点</p>

<ul>
<li>Lambdaの実行環境にはデフォルトでParamikoが入ってないので、deployment packageに含める必要がある</li>
<li>Mac上ではpythonライブラリの互換性が衝突する為、Linux（EC2等）上でpackageを作成する必要がある</li>
<li>最近発表された<a href="https://aws.amazon.com/blogs/aws/new-access-resources-in-a-vpc-from-your-lambda-functions/">VPC対応</a>を使ってprivate networkで通信をしたい場合、外部への経路はそのままでは不可なので、s3の場合はVPC endpointを作成するかNATが必要になってくる。詳しくはこの<a href="http://qiita.com/ijin/items/94c0bc4b8f6f5e77a591">記事</a>を。</li>
</ul>


<p><div><script src='https://gist.github.com/26afca1e9b03ecaf4d8e.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h2>Git</h2>

<p>Gitは<a href="https://github.com/jelmer/dulwich"><code>dulwich</code></a>というライブラリを利用。sshプロトコルの場合、デフォルトではシステム上のsshが利用されるのでPython版の<code>ParamikoSSHVendor</code>クラスを使えばすんなりいくと思いきや、キーファイル指定が出来なかったのでそこを少し改変。また、Lambda上での特殊な環境の為か<code>sys.stderr</code> のencode周りがうまく検出されなかったので、<code>dulwich.porcelain.push</code> methodも若干修正。</p>

<p>Paramikoを使っているので、上記同様パッケージ作成はLinux上で。</p>

<p>以下はprivate repositoryをclone後、別branchに新規ファイルを追加後にcommitし、githubへpushする例。</p>

<p><div><script src='https://gist.github.com/080822d2c7859b528631.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>それでは、良いLambdaライフを！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambdaの容量を監視しよう]]></title>
    <link href="http://ijin.github.io/blog/2016/01/14/monitor-lambda-capacity/"/>
    <updated>2016-01-14T05:23:00+09:00</updated>
    <id>http://ijin.github.io/blog/2016/01/14/monitor-lambda-capacity</id>
    <content type="html"><![CDATA[<p><code>2016/1/14</code>現在、AWS Lambdaにはなんと<strong>リージョン</strong>毎！にアップロードできるパッケージの合計サイズがたったの<strong>1.5GB</strong>という<a href="http://docs.aws.amazon.com/lambda/latest/dg/limits.html#limits-list">悲しい制限</a>があります。特にlibraryを同包したり、versioningを使ったりしてCIをガンガン回してると、結構すぐこの上限に達してしまいがちです。そこで、Lambdaの総容量はAWSコンソール上には表示されるものの、トラッキングし辛いので監視する仕組みを作ってみました。</p>

<h2>仕組み</h2>

<p>LambdaのScheduled Eventsを使って、<code>ListFunctions</code>と<code>ListVersionsByFunction</code> APIを叩いて、個別functionの<code>CodeSize</code>をサマって、<code>PutMetricData</code>でCloudWatchに投げて、Alarm設定してるだけ。</p>

<script src="https://gist-it.appspot.com/https://github.com/ijin/check_lambda_capacity/blob/master/lambda_function.py"></script>


<p>(*) <code>2016/1/26</code> 追記：<a href="https://twitter.com/marcy_terui">@marcy_terui</a>さんからの<a href="https://twitter.com/marcy_terui/status/689326911634329600">ご指摘</a>でVersionsの容量計算が抜けてました。ありがとうございます。</p>

<p>といっても、今後別アカウントでいちいち設定（IAM role&amp;policy、Lambda、SNS、CloudWatch）するのも非常に面倒くさいので、今回は<a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/working-with-templates-cfn-designer.html">CloudFormation Designer</a>を使って、ほぼ一発で環境を再現できるようにしました。</p>

<h2>CloudFormation</h2>

<p>ボタン作ってみた。<a href="https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#/stacks/new?stackName=check-lambda-capacity&templateURL=https://s3-ap-northeast-1.amazonaws.com/ijin/aws/lambda/check_lambda_capacity/check_lambda_capacity.template">
<img src="https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png">
</a></p>

<h3>Stack Creation</h3>

<p>Designerではこんな感じ。心なしか、jsonの苦痛が多少楽になったような。。後、Propertyの補完機能は良いけどショートカットが<code>Cmd+Space</code>なのでSpotlightさんがぁ。</p>

<p><img src="https://lh3.googleusercontent.com/CLHrqYHPDKPxABDkWdrl0FYbEEC9enKmbOaK75TqhqL5tPnQ8oRjA3_f3N3iJoD5cSanPbbvt9lT=w880-h586-no"></p>

<p>s3からtemplateを指定。
template urlは<code>https://s3-ap-northeast-1.amazonaws.com/ijin/aws/lambda/check_lambda_capacity/check_lambda_capacity.template</code></p>

<p><img src="https://lh3.googleusercontent.com/XeF-yQk1cxy8z8KnHTJS3mP-onExoYmbJ7-OYISmLd3NYxO4fVCQnqAxygAEu6zdMtzEy16641C-=w826-h268-no"></p>

<p>Parameterとしては以下が指定可能</p>

<ul>
<li>アラート閾値（Byte単位）</li>
<li>SNS topic（空の場合は、自動作成される）</li>
</ul>


<p><img src="https://lh3.googleusercontent.com/vX0JiEE_me3Wn6__PbNysmSYVkGiOs4jbqivZm7lOoq18kZpyrV9lj01kL9-rDMCX1JAS7BHVmI4=w902-h509-no"></p>

<p>Stackを作成すると、諸々のリソースが数分で出来上がり。</p>

<p><img src="https://lh3.googleusercontent.com/rQy-Any2cmz9I7YxuGD-Pi8_4VB9dGKFnCbAxWHH4QPjRMF7Y9nKAi2sZPY2HogoL2vpcc8ABy4E=w1050-h260-no"></p>

<h3>Manual Labor</h3>

<p>本当は以上で終了！にしたいところですが、LambdaのScheduled Eventsの設定はAWSコンソールからのみしか出来ないという<del>情けない</del><a href="http://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html">残念な状態</a>（<code>2016/1/14</code>現在）なので、ここからポチポチ設定作業。。（API重視の開発姿勢はどこ行ったんだろう）</p>

<p>(*) <code>2016/1/26</code> 追記：この記事の翌日に発表された <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatchEvents.html"><code>CloudWatch Events</code></a> の <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/ScheduledEvents.html"><code>scheduling</code> 機能</a> によって出来るようになりました。なんというタイミング。</p>

<p><img src="https://lh3.googleusercontent.com/2pedymzqDYHJ30u7VglVv-7_6IpFhpOnRdnE4-QxjuIdX1fep2FwtoyDNr1Kl5yEqT1rtjoLDLZx=w581-h238-no"></p>

<p><img src="https://lh3.googleusercontent.com/hcLpNX45gIQZQUQGvsyyIXfOH3s9yDpNLIZJN8TU-RUZDdMGdrsNXAb_NRupjWF9Hf4QrK4y6lXO=w864-h441-no"></p>

<p>最小頻度が5分毎
<img src="https://lh3.googleusercontent.com/lzuWtzvkK1A5pUSPyShVaFzzOQ13cD8PFVfCAz3rxSYkn5sKirWnhq-4PlKyhuesMlCQtrfH57yx=w862-h507-no"></p>

<h3>Graph</h3>

<p>これで、グラフが取れて閾値を超えたらアラートが飛ぶようになる</p>

<p><img src="https://lh3.googleusercontent.com/yzswstqCbaTzpkYfy5MlRS2I9ur5Is3hI8Eii-o27twq-fYA_6o8SY5Rrn0DbyZEn8UJarGhh_9L=w570-h270-no"></p>

<p><img src="https://lh3.googleusercontent.com/NE43x1KQW76QO7b4TMIjjcEYrpQ07B9SNOb-9L-wEnNKc8oC-69HpgzWiVABnQwBSNGtDz4ayeTR=w286-h221-no"></p>

<h2>Code</h2>

<p>出来上がったCloudFormation templateコードはこちら。<code>AWS::Lambda::Function</code>がlambdaのresource担当だけど、templateにfunctionをインラインで埋め込めるのは現時点では<a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html"><code>nodejs</code>のみ</a>なので仕方なくzipしたpythonコードをs3にアップして参照するようにしてる。</p>

<script src="https://gist-it.appspot.com/https://github.com/ijin/check_lambda_capacity/blob/master/check_lambda_capacity.template"></script>


<p>元気があれば、そのうちnode版も書こうかな。。</p>

<p>GitHubのリポジトリは<a href="https://github.com/ijin/check_lambda_capacity">こちらから</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LambdaのログをSlackで見よう]]></title>
    <link href="http://ijin.github.io/blog/2015/12/10/post-lambda-logs-to-slack/"/>
    <updated>2015-12-10T00:56:00+09:00</updated>
    <id>http://ijin.github.io/blog/2015/12/10/post-lambda-logs-to-slack</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2015/lambda">今年もやるよ！AWS Lambda縛り Advent Calendar 2015</a>の10日分です。</p>

<h2>背景</h2>

<p>AWS Lambdaで開発してるとちょこちょこ実行ログを見たりします。cliであれば、<a href="https://twitter.com/sgwr_dts">@sgwr_dts</a>さんの<a href="https://github.com/winebarrel/lambchop">lambchop</a>が<code>tail</code>的に使えて素敵なんだけど、後で見返したり、検索したりするので、最近ではログをSlackに通知するようにしているのでその紹介を。</p>

<p>イメージはこんな感じ。</p>

<p><img src="https://lh3.googleusercontent.com/A1fsUgw4m52Db4UeOqR3xaQHIGF940MsbA1tchFkF8Pul-ixO6E=w563-h445-no"></p>

<p>ログはCloudWatch logsに溜まるのでsubscriptionさえ出来れば、別にソースはLambdaじゃなくても良いんですけどね。</p>

<h2>Lambda</h2>

<p><div><script src='https://gist.github.com/917193e443ff41cdf98b.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>CloudWatch logsのイベントをparseして、日付の色付けやタイムゾーン変換等ちょっこっと加工してメッセージと共に指定の<code>#channel</code>に飛ばすようにし、別のSlack通知用lambda functionをinvokeしているだけですね。
（Slack用のlambdaは<a href="/blog/2015/08/06/github-to-lambda-to-slack/">以前のエントリ</a>を参照）</p>

<p>何故Slackの部分を別functionにしてるかというと、最小単位の機能の切り出しによる<strong>portability</strong>とcross-account間のinvokeが可能となる<strong>reusability</strong>からです。</p>

<h2>紐付け</h2>

<h3>cloudwatch logsにlambda呼び出しの権限設定</h3>

<p><code>
aws --region ap-northeast-1 lambda add-permission --function-name "cloudwatch_logs" \
  --statement-id "logs-my_lambda" --principal "logs.ap-northeast-1.amazonaws.com" \
  --action "lambda:InvokeFunction" --source-account "123456789012" --source-arn \
  "arn:aws:logs:ap-northeast-1:123456789012:log-group:/aws/lambda/my_lambda:*"
</code></p>

<h3>subscription filterの作成</h3>

<p><code>
aws --region ap-northeast-1 logs put-subscription-filter \
  --log-group-name "/aws/lambda/my_lambda" --filter-name logs-my_lambda \
  --filter-pattern ""
  --destination-arn arn:aws:lambda:ap-northeast-1:123456789012:function:cloudwatch_logs`
</code></p>

<h2>実行</h2>

<p>これでlambda functionが実行されると、Slackにログが通知されます。</p>

<p><img src="https://lh3.googleusercontent.com/-PgkSA7jGbVTf3w1Eq5CZuvUAN4_bkKpR811Vcij5MlLam22C10=w706-h396-no">
<img src="https://lh3.googleusercontent.com/JKU31Qsd6cOSWe011m8UJaBYljDrXwz08ym0ff79DngGMxDL_y0=w705-h234-no"></p>

<p>うん、見やすい。</p>

<h2>問題点</h2>

<p>これでログが飛ぶようになったのは良いですが、Lambdaが実行されてからSlackへの通知まで10数秒とやや長めの時間がかかってしまうのが現在の難点です。（Immediate Feedbackはないものの履歴や検索用途には十分だけど）</p>

<p>調べてみるとLambdaからCloudWatch logsへの書き出しが一番時間がかかっているのが判明。Logsへ書き出されたら、そこからの処理時間は1〜2秒とちょっと前に<a href="https://aws.amazon.com/about-aws/whats-new/2015/09/near-real-time-processing-of-amazon-cloudwatch-logs-with-aws-lambda/">発表された</a>CloudWatch logsの<em>near realtime processing</em>の通りなので、早く<code>Lambda -&gt; CloudWatch logs</code>も同じような処理時間を実現して欲しいものです。</p>

<p>まあ、別にCloudWatch logsにさえ入れば早いので、lambda logに限らずいろいろ応用できそうですが。</p>

<p>では、Happy Lambda Life!</p>

<p>参考</p>

<ul>
<li><a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/Subscriptions.html#LambdaFunctionExample">http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/Subscriptions.html#LambdaFunctionExample</a></li>
<li><a href="http://inokara.hateblo.jp/entry/2015/10/18/201212">http://inokara.hateblo.jp/entry/2015/10/18/201212</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
