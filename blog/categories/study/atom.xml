<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | @ijin]]></title>
  <link href="http://ijin.github.com/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://ijin.github.com/"/>
  <updated>2013-11-12T15:38:15+09:00</updated>
  <id>http://ijin.github.com/</id>
  <author>
    <name><![CDATA[Michael H. Oshita]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ISUCON3の本戦に参加してきた]]></title>
    <link href="http://ijin.github.com/blog/2013/11/11/isucon3-final/"/>
    <updated>2013-11-11T11:27:00+09:00</updated>
    <id>http://ijin.github.com/blog/2013/11/11/isucon3-final</id>
    <content type="html"><![CDATA[<p>先月の<a href="http://ijin.github.io/blog/2013/10/07/isucon3-preliminary/">予選に通過したの</a>で、<a href="http://isucon.net/">ISUCON3</a>の本戦に参加してきました。</p>

<p>完敗。</p>

<h3>お題発表</h3>

<p>画像版twitter。投稿する画像の公開レベルをpublic, private, followers onlyに設定できるシステムが1台のVPS（2コア、4GB RAM）で動いている状態。プレスを打った為、大量アクセスがくる18時までに別途用意された4台のサーバを使ってスケールせよという使命を与えられる。</p>

<h3>流れ</h3>

<p>画像データが1万点・約3GBあったので、まず失敗しても戻れるようにバックアップ取得を開始。それと平行して他のサーバへのsshキー登録したり、hosts書いたり、もろもろ下準備。</p>

<p>デフォルトのperlのスコアは<strong>1206.8</strong></p>

<p>言語はrubyと決めていたので、supervisorで立ち上げてみるが起動失敗。よくよく調べてみるとforemanが入ってなくてGemfileに追加してbundle。</p>

<p>この時のスコアが<strong>1180.8</strong></p>

<p>次にデータベースを見てみるものの、レコード数も比較的少なく、総容量が2MBもないのでできる事は限定されていると判断。クエリーをさらっと見た後にentriesのimageカラムに対してインデックスを張ったぐらい。</p>

<p>アクセスログにレスポンスタイムを出力するようにして1回ベンチを走らせログを解析。</p>

<p>ブラウザ上の挙動を確認しつつ、ソースコードを読んで結局画像変換のconvert処理が一番重そうだったのでそこから着手することに。</p>

<p>予選の時も外部プログラムを呼んでいるところが改善ポイントの一つだったので、まずfastimage_resizeを使って置き換えてみるものの、処理速度はそんなに上がらず、スコアもほぼ横ばい。</p>

<p>その間に、ロングポーリングの処理を変更してみるけど、</p>

<pre><code> "message": "2013-11-09T14:48:17 [36898] [CRITICAL] timeline refrection timeout"
</code></pre>

<p>タイムラインの反映がうまくいってない模様。
（ちなみにエラーメッセージのrefrectionはreflectionのスペルミスですね）</p>

<p>次に画像変換処理の部分で毎回リクエストがくる度に実行されるリンクをredisにてキャッシュ。これは効果があり、スコアは<strong>6634.2</strong>で暫定3位。</p>

<p>その間にVarnishやHaproxy + nfsを軽ーく試してみるものの、スコアは伸びず。</p>

<p>この辺でリンクだけではなく、画像自体をredisに突っ込んで全サーバで処理するアーキテクチャを決定。<a href="https://twitter.com/acidlemon">@acidlemon</a>さんと似た<a href="http://beatsync.net/main/log20131110.html">構成</a>ですね。ただ違うのはPOST後のsidekiqを使って処理を裏のワーカーに任せるという事。</p>

<p>sidekiqが動作するところまではでき、全画像の変換を試みるがredisサーバのメモリが溢れてたので、最初にアクセスされる直近30件、アクセス比率が高いサイズsと、新規画像のみに注力。スコアは徐々に上がる。</p>

<p>その後はただひたすらに、もくもく実装とデバッグ。</p>

<p>残り3-40分ぐらいのところで、生ハムチームでブレークスルーが起こり、彼らが一気にトップへ踊り出る。我々も1台構成であれば5位ぐらいにはなれただろうけど、スケールアウトしなければ全く勝負にならないので最後の最後まで果敢に挑戦するもあえなくタイムアップ。</p>

<p>結果、FAIL。</p>

<h3>感想</h3>

<p>今回はサーバが5台もあったので、スケールアウトしなければならないのは明白で、実装を真っ先に着手するべきでしたね。前半で1台だけチューニングして後でスケールしようと思ったのが戦略上の致命的ミス。時間切れで終わったので実装が間に合っていたらそれなりのスコアが出たはずかと。優勝した生ハムチームが結構ギリギリまでかかったのを考えると、やはり見極めたポイントは重要で、さすがとしか言いようがないです。また、一番時間のかかった画像配信に関しては普段AWSを使っている身としてはs3へ画像を突っ込むのが当然だと考えていたので、なかなか新鮮で違う脳を使う感じで楽しめました。</p>

<h3>その他</h3>

<ul>
<li>途中でディスカッションをすれば良かった（予選で出来ていたのに本戦で焦ってしまった）</li>
<li>落ち着いて俯瞰して見るべし。見極め大事</li>
<li>予選とかの先入観が邪魔したのでまっさらの状態で考えるべき</li>
<li>ベンチマークツールはFAILしても再実行に2分待たされるのがどうしてももどかしかった</li>
<li>ベンチマークツールの他のサーバへの実行切替がバグってて時間をロスった</li>
<li>チーム名のRevengeが果たせなかったので、来年はチーム名どうしようかな。。</li>
<li>ドヤモリスが満面の笑みで幸せそうだった</li>
</ul>


<p>ISUCONのレベルも毎回毎回レベルが上がっていき、運営側の苦労が伺えます。本当にお疲れ様でした！また来年にも期待しています！</p>

<h3>おまけ</h3>

<p>さて。1年間待ち望んだイベントがあっという間に終わってしまって消失感・焦燥感を味わいつつも、気を取り直して次はAWS re:InventのGAMEDAYに日本から唯一（多分）の参加者として参戦します！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3の予選を通過した（はず）]]></title>
    <link href="http://ijin.github.com/blog/2013/10/07/isucon3-preliminary/"/>
    <updated>2013-10-07T12:12:00+09:00</updated>
    <id>http://ijin.github.com/blog/2013/10/07/isucon3-preliminary</id>
    <content type="html"><![CDATA[<p><a href="http://ijin.github.io/blog/2012/11/05/isucon2/">去年</a>に引き続き参加した<a href="http://isucon.net/">ISUCON</a>第3回目の予選を通過しました。</p>

<p><a href="http://isucon.net/archives/32848462.html">結果</a>は参戦1日目の方で<strong>4位</strong>。
74チーム中、総合<strong>6位</strong>になりました。</p>

<h3>事前準備</h3>

<p>再び<a href="https://twitter.com/cads">@cads</a>と<a href="https://twitter.com/fruwe">@fruwe</a>に声をかけ、去年3位という雪辱を果たすべく、「The Revenge of Mr. Frank &amp; Co.」とチーム名を改名。
今年はチーム数が膨れると予想されてたので去年と違って予選がありトップ20位ぐらいまでしか本戦に行けないという仕組み。方針は以下の通り。</p>

<ul>
<li>言語は我々の得意なruby（goも面白そうだったけど）で勝負</li>
<li>去年Railsの再実装で失敗した為、Sinatra（であれば）でやりきる</li>
<li>Sinatra、Varnish、Sidekiq、Redisの復習</li>
<li>計測ツールの導入</li>
<li>早い時期に全体のスケジュールを決定する</li>
<li>戦略転換の見極め</li>
</ul>


<p>特に去年の敗因が戦略転換の遅れだったので、それを意識するようにしました。</p>

<h3>お題発表</h3>

<p>Markdownを使ったコメントシステム。しかもユーザログインがあってポストのprivate/public指定ができるというちょっとアドバンストな作り。</p>

<h3>前半戦</h3>

<p>今回、サーバはAWSのAMIとして提供され自分のアカウントで起動するやり方だったので、<a href="http://d.conma.me/entry/2013/04/08/190229">CPUガチャ</a>に若干期待しつつ10台一気にlaunchする。確認したら全部同じCPUだったので半分落として、後は本番用、開発用、バックアップ用として残す。</p>

<p>まずは、状況把握の為にひとまず皆でルールの理解とソース解析。ざっと目を通した後はブラウザで動作確認し、今回同一マシン内で実行させるベンチマークプログラムを複数言語で実行。制御方法は去年と同じsupervisord</p>

<p>Perl</p>

<pre><code>2013/10/05 10:31:15 done benchmark
Result:   SUCCESS
RawScore: 1020.4
Fails:    0
Score:    1020.4
</code></pre>

<p>Ruby</p>

<pre><code>2013/10/05 10:38:11 done benchmark
Result:   SUCCESS
RawScore: 2446.9
Fails:    0
Score:    2446.9
</code></pre>

<p>Go</p>

<pre><code>2013/10/05 10:45:32 done benchmark
Result:   SUCCESS
RawScore: 2840.1
Fails:    0
Score:    2840.1
</code></pre>

<p>Node</p>

<pre><code>2013/10/05 10:49:07 done benchmark
Result:   SUCCESS
RawScore: 1543.4
Fails:    0
Score:    1543.4
</code></pre>

<p>お、rubyそんなに悪くないかも。
デフォルトのperlが遅いのはメモリが温まってないかなと思って再実行したけど飛躍的に良くはならなかったですね。</p>

<p>この辺で予め決めていた開始後1時間という期限になったので作戦会議とスケジュール策定に入る。</p>

<p>まずはVarnishを入れてみようという事なので一人がその作業にとりかかる。もう一人はNewrelicという測定ツールの導入とバックアッププランのRedisバージョンの作りこみ。私はDB周りのチューニングやミドルウェア周り、後は二人のサポート。</p>

<p>DBはMySQLだったので全クエリを吐き出してpt-query-digestで解析して統計的に遅いクエリ順に潰す。
schemaをよく見たらindexがなかったので張ったり、クエリーをちょっと改善してみたり、パラメータを変更（innodb_buffer_pool_sizeとinnodb_flush_log_at_trx_commitのみ）したり黙々作業。</p>

<p>時間はあっという間に過ぎて両方のバージョンを導入してみるもののベンチマークツールからFAILを大量にくらい、スコアが全然つかず。。。</p>

<p>折り返し時点が迫ってきたので、とりあえず今あるチューニングだけのスコアを送信。</p>

<pre><code>2013/10/05 13:43:37 done benchmark
Result:   SUCCESS
RawScore: 3791.5
Fails:    6
Score:    3450.2
</code></pre>

<h2>後半戦</h2>

<p>その後、unicornのワーカー数を調整したり、クエリーを更に見なおしたり、initializer作って事前にキャッシュを温める仕組みを作ったりして6000ぐらいのスコアを出した気がする（この辺は作業ログを残すのを忘れていたので記憶が曖昧）</p>

<p>Redisバージョンは雰囲気的に無理そうだったので早々に捨ててこの辺は去年の教訓が生かされてると思う）ESI対応 + Varnishに注力する事を決断。しかし、こっちもエラーの連発。。</p>

<p>最も悩まされたのは</p>

<pre><code>14:53:20 [FAIL] invalid Cache-Control header
14:53:21 [FAIL] invalid post memo URL http://localhost/
</code></pre>

<p>どうやらリバースプロクシ用に付与しているヘッダーチェックで弾かれていた模様。</p>

<p>VCLファイルをよく見たら既存のシステムから流用したモノらしく、余計なルールがたくさん入っていたので、仕切り直しということで一旦白紙から再作成する事に。</p>

<p>なんとか基本部分だけ動かす事ができるようになってスコア送信。</p>

<pre><code>2013/10/05 15:45:18 done benchmark
Result:   SUCCESS
RawScore: 14694.2
Fails:    0
Score:    14694.2
</code></pre>

<p>この辺で暫定一位。</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/search?q=%23isucon&amp;src=hash">#isucon</a> オンライン予選一日目 中間発表二回目です。残り2時間となった16時時点での順位は以下の通り&#10;1. The Revenge of Mr. Frank &amp; Co.&#10;2. hidekiy&#10;3. ( (0) / (0)) ☆祝☆&#10;4. パイの実g&#10;5. 白金動物園&#10;続く</p>&mdash; 941 (@941) <a href="https://twitter.com/941/statuses/386386593696604161">October 5, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>
<div class='embed tweet'><blockquote class="twitter-tweet"><p>isuconは外国県人会が暴れてるのかな？</p>&mdash; ばば としあき (@netmarkjp) <a href="https://twitter.com/netmarkjp/statuses/386393051230261248">October 5, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>

<br />


<p>しかしその後privateページのキャッシュexpire方法を模索するも、なかなか進まずにタイムリミットが刻々と迫り、他のチームがどんどん上位に食い込んできて若干焦り始める。ひとまず、強制フラッシュするエンドポイントと裏で定期実行するバックグランドタスク（Varnishでいう所のbanlurker相当）を即席で実装したりしてスコアを伸ばすもトップには届かず敢え無く終了。</p>

<p>振り返ってタイムスタンプを見るとギリギリまで粘っていたのが分かりますね。</p>

<pre><code>-rw-r--r-- 1 root root 2322 Oct  5 17:59 /etc/supervisord.conf
</code></pre>

<p>結果、送信できた最終スコアは「<strong>20599.5</strong>」でした（ローカルスコアは22000ぐらいだったけど）。
予選突破（暫定）はできたものの、まだまだ課題山積な感じです。</p>

<h3>良かった点</h3>

<ul>
<li>最初に戦略とスケジュールを策定できた</li>
<li>去年学んだ捨てる勇気を持てたこと</li>
<li>去年よりいろいろ試せたので敗北感は改善</li>
<li>オンライン参戦なので普段使い慣れてる環境で落ち着いて出来た（本戦はアウェー）</li>
<li>今年の密かな目標であるモリスさんに勝ったこと（予選だけど）</li>
</ul>


<h3>反省点</h3>

<ul>
<li>作業ログをもっとしっかり取るべき</li>
<li>バージョン違いはgit mergeせずにbranchをcheckoutするべき</li>
<li>lingrサポート見ればよかった</li>
<li>MySQL5.6のMemcache APIの存在には気づいてたけど、罠とは知らなかった</li>
<li>Newrelic導入に時間かけた割には得られる情報量が薄かった</li>
<li>リバースプロクシが遅れたのは全実装して投入を試みたからでincremental apporachの方が良かった</li>
<li>全員のタスクマネジメントとペアプログラミングをもっとすれば良かった</li>
</ul>


<p>今回も前回同様、非常に楽しめました。
運営の皆様、お疲れ様でした&amp;本戦はさらなる期待をしてます！</p>

<h3>おまけ</h3>

<p>後日行われた各チームの反省会で判明したのがworkloadの存在。どうやらベンチマークツールの並列度を上げる事ができるらしく、そこそこ速くなっているシステムだったらスコアが1.5倍ぐらいは伸びたかもとの事。最終スコアを考えると、30000点台のトップを取れたかもしれないのが無念。。アプローチ自体は総合トップの<a href="https://twitter.com/sechiro">@sechiro</a>さんと<a href="http://sechiro.hatenablog.com/entry/2013/10/07/%23isucon_2013_%E4%BA%88%E9%81%B8%E3%82%92%E3%83%88%E3%83%83%E3%83%97%E9%80%9A%E9%81%8E%E3%81%97%E3%81%A6%E3%81%8D%E3%81%9F%EF%BC%88%E3%81%AF%E3%81%9A%EF%BC%89%E3%80%82">似ていた</a>ので方針は間違ってなかったかと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Game Day Tokyo 2013で受賞してきた]]></title>
    <link href="http://ijin.github.com/blog/2013/06/10/aws-game-day-tokyo-2013/"/>
    <updated>2013-06-10T23:33:00+09:00</updated>
    <id>http://ijin.github.com/blog/2013/06/10/aws-game-day-tokyo-2013</id>
    <content type="html"><![CDATA[<p>大統領選挙でオバマ陣営のシステムを堅牢化する為に用いた手法である仮想対戦シミュレーション「<a href="http://gameday2013.doorkeeper.jp/events/3960">AWS Game Day Tokyo</a>」が日本で初めて（世界2番目に）開催されたので参加してきました。</p>

<p>結果、ベスト・ディフェンス賞こと「<strong>Most Awesome Fix!</strong>」賞を受賞しました。</p>

<h2>経緯</h2>

<p>以前、<a href="http://jaws-ug.jp/jawsdays2013/">JAWS DAYS 2013</a>でMiles Wardが講演した「<a href="http://www.publickey1.jp/blog/13/obama_for_america.html">Behind the Scenes of the Presidential Campaign</a>」でチームを攻撃・防御に分けて対戦させ、そこから学んだ事をフィードバックしてシステムをより堅牢にするという「Game Day」を知り、日本でもやりたいねという話になってました。そこで先日の<a href="http://www.awssummittokyo.com/">AWS Summit Tokyo</a>のスピンオフイベントとして、Milesの再来日に合せてADSJ（アマゾンデータサービスジャパン株式会社）さんによって開催される事になりました。チーム戦の大会は<a href="http://ijin.github.io/blog/2012/07/03/tuningathon4/">チューニンガソン</a>や<a href="http://ijin.github.io/blog/2012/11/05/isucon2/">ISUCON</a>以来なので、わくわくしながら速攻で応募をしました。</p>

<h2>概要</h2>

<p>大体、こんな流れです。</p>

<ul>
<li>システムの構築・堅牢化</li>
<li>相手システムの攻撃（この間、自システムも攻撃される）</li>
<li>自システムの修復</li>
<li>評価</li>
</ul>


<p>それぞれ、2〜3人のチームに別れ、計18チームにより対戦。私のチーム名は時事ネタとして今流行りの「<a href="http://jp.techcrunch.com/2013/06/07/20130606report-nsa-collects-data-directly-from-servers-of-google-apple-microsoft-facebook-and-more/">PRISM</a>」としました。
システム概要はnginksさんの<a href="http://d.hatena.ne.jp/nginks/20130608/1370700185">ブログ</a>が非常に分かりやすいです。
要するに画像変換処理バッチクラスターですね。</p>

<h2>構築</h2>

<p>手順書をざっと見ながら画像処理クラスターを構築。相方はシステムの人間ではなかったので、動作確認を手伝ってもらいつつ実質一人でもくもくと作業。s3作成、sqs作成、アプリのインストール・設定・動作確認、AMI化、Cloudwatch設定、AutoScaling設定等を淡々と。構築しながらシステムを把握して行くけど、結構これだけで時間がとられます。なので、じっくりと防衛策は練れなかったのでひとまず、プロセスの自動復旧をしてくれるmonitをインストール・設定し（upstartでやりかけたけどうまく動かなかった）、主要ファイルのchecksumを取って改善検知してメール通知する仕組みを導入。</p>

<h2>攻撃</h2>

<p>AWSキー（Poweruser権限）を奪取したという仮定の元、相手システムに攻撃をしかけるターン。
単純に全部消したり、セキュリティグループの権限を変えたりではあまりにもつまらないので、いろいろ考えます。（無論、システムの全消しは誰でもできる最低の攻撃手法）</p>

<p>まず、状況把握する為にいろいろ動作確認。キューに画像を突っ込んで、ちゃんと処理されるとか。あれ、でも動かない。。
どうやらTokyoで作りかけたけど、結局Virginiaリージョンで仕上げたと運営側から伝えられる。いきなりのタイムロス！</p>

<p>気を取り直して、稼働中のインスタンスに入る方法を思いつく。通常はキー設定されているのでsshでは入れないので仮のインスタンスを起動し旧インスタンスのroot volumeのEBSを強制detachし、仮インスタンスにattachして中身をいじってからre-attachする事に。見た目は同じinstance-idなのに中身だけ違う、一見すると分かりづらいです。そこで旧インスタンスを一旦停止させる為にstopさせると、、terminateされちゃいました。。よくよく調べて見ると、Auto Scalingの設定になっていて、min-sizeの制約によって旧インスタンスが消され、代替インスタンスが自動的に起動するようになってました。</p>

<p>どうやら構築が間に合わなかったチーム用に運営側が用意した自動構築をしてくれる虎の子のCloudformationを使った模様。
そこで、相手チームのスキルレベルがそれ程高くないと判断し、Auto Scalingの元AMIを置き換える事に。
新たなlaunch configを作成し、既存のscaling groupと同盟のものを作成。</p>

<p>次にs3への攻撃。bucket名はglobalなnamespaceなので、こいつを削除して同名のを別AWSアカウントで作れば乗っ取りが可能。。
のはずが、削除してから一定時間経過しないと作成不可だったので1字違いのbucketを作成しておく。</p>

<p>最後にs3のbucket一覧を取得して、常に空のディレクトリと同期し続ける攻撃を思いつき、実装を始める。システムはs3に出力するのでそこを継続的に空にする攻撃です。しかし、実装を初めて動作確認の途中で時間切れになりシステムに埋め込めなくて断念。もうちょっと時間が欲しかったです</p>

<h2>修復</h2>

<p>次は自システムが受けた攻撃を修復するターン。</p>

<p>いろいろ余計なインスタンスが起動していたが、まずやったのがAMI番号の確認。（これが無事であればOSに侵入されていようがAMIをベースに全体の再構築が速やかにできるので）
幸い、控えていたのと一致していたので他のインスタンスを全て停止。一応monitのアラートメールが飛んでいなかったので、インスタンスに対しての操作は限定されているのだろうとは踏んでましたが。</p>

<p>AMIが無事なら次はAuto Scalingの確認。ざっと見た感じだと、lauch configは操作されておらず、scaling groupのmin-sizeが0に変更されている模様。他の変更点は確認が面倒だったので、一旦全部削除してさくっと再作成。後で聞いた話だと、Auto Scalingのrecurring schedule設定で1分起きに0台にする設定をしていたらしいが、消された時点で攻撃は無効化。</p>

<p>次にSQS。消して再作成すればてっとり早いけど、相手チームがキューに投入した画像を最終的に表示させないといけないルールだと誤解していて、その復旧に務める。新しく作ったSQSと比較するとパラメータ（Default Visibility Timeout, Retention Period, Message Size等）が異常な値に変更されていると分かり、通常の値へ戻す。</p>

<p>この時点でアプリとSQSの通信を確認するも疎通できない事を把握。pingが通らない事からSecurity Group, Routing Table, Network ACLが変更されていないかを確認。どうやらSecurity GroupのIn/Outルールが削除されている単純な攻撃だと判明し、なんなく再設定。</p>

<p>キュー内のメッセージが1コ処理されるのを確認し、SQS周りは対応済みかと思ったけど残り2コのメッセージがいくら待てども処理されず、若干悩む。
ログを見たり、メッセージの中身を覗くとと「<strong>--max-redirect=99999999</strong> 」が目に留まる。どうやら変換する画像をダウンロードする部分で無限ループさせている模様。メッセージを削除し、そのパラメータを除外したものを流してちゃんとキューが処理される事を確認。</p>

<p>最後にs3周りで怪しい設定がないかを調査して、一通りの動作確認をして復旧完了。</p>

<h2>振り返り</h2>

<p>お互いに対戦したチームと顔合わせをし、攻撃や復旧の手の内を明かします。全チームの行動記録を集約して運営側で審査を行われ各賞が授与される中、我がPRISMはSQS内の無限ループを検知・修復したのが評価されて最も優れた修復を行った「<strong>Most Awesome Fix!賞</strong>」を頂きました。後で他のチームに聞いた所、monitのような検知・通知の仕組みを導入した所はなさそうだったので、それも評価ポイントだったかも知れません。</p>

<p>賞の内容としては、ワンタイムトークンを生成するハードウェアMFAデバイスとAWSのクーポンコードでした。ありがとうございます。</p>

<p>最後にMilesが壊れても戻せるようにあるべき状態の定義と常に比較して自動的に自己治癒するのが最高のシステムと言ってました。AWSの状態を保存するにはCloudformerでCloudformationテンプレート化すれば便利で楽だけど、chefみたいにIdempotency（冪等性）を継続的に保証する仕組みをそのレイヤーで組むのはなかなか大変ですね。（個々のサーバ単位は可能だとしても）</p>

<h2>感想</h2>

<p>「<em>チューニンガソン</em>」や私が他にお手伝いをしている「<em>トラブル☆しゅーたーず</em>」とも一味違って、非常に楽しめました。</p>

<p>以下、思った事をいくつか。</p>

<ul>
<li>構築に時間が取られたのでなるべく出来合いのシステムがあった方が防衛策に専念できそう</li>
<li>攻撃可能な時間が思ったより短かったのでもうちょっと長めで</li>
<li>Default-VPCとEC2-Classicでは挙動が違うのでアカウントタイプは統一した方が良い</li>
<li>ターン性ではなく、攻撃と修復・防御のリアルタイム性を試すとか</li>
<li>あるべき正しい状態を把握する為のツールがあると他のタスクに集中できるかも</li>
</ul>


<p>次に開催される時も参加したいですね。もしくは運営側のお手伝いでも！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON2に参加してきた]]></title>
    <link href="http://ijin.github.com/blog/2012/11/05/isucon2/"/>
    <updated>2012-11-05T21:58:00+09:00</updated>
    <id>http://ijin.github.com/blog/2012/11/05/isucon2</id>
    <content type="html"><![CDATA[<p>開催2年目となる<a href="http://blog.livedoor.jp/techblog/archives/67700199.html">ISUCON (Iikanjini Speed Up CONTEST)</a>に参加してきました。</p>

<p>結果は3位。</p>

<h3>事前準備</h3>

<p><a href="https://twitter.com/cads">@cads</a>と<a href="https://twitter.com/fruwe">@fruwe</a>に声をかけ、「Mr. Frank &amp; Co.」という米西独チームを編成。
去年のお題を見ると、簡単なブログサイト。実装はphp, python, perl, ruby, node.jsのいずれか。</p>

<ul>
<li>キャッシュ機構入れるんだったら、慣れてるrubyで実装できるようにrailsでスケルトンプロジェクトをgithubに作っておいてみんなで共有。</li>
<li>VarnishやResque/Sidekiq, Redisの復習をしてコード追加</li>
<li>試しに他のrubyバージョンのインストール</li>
<li>後はテスト用のec2インスタンスの用意。</li>
</ul>


<h3>お題発表</h3>

<p>「NHN48」と「はだいろクローバーZ」のチケット販売システムw。
お、似たようなシステム前作った事あるからいけるかな？セッション対応でもESI使えるからアドバンテージがあるかもと思ってみる。</p>

<h3>前半戦</h3>

<p>まずは、いつものようにバックアップして戻れるように、gitプロジェクトにも追加。</p>

<p>チームメイト2人にはソースコードを解析をしてもらいつつ、自分は現在の環境の把握とベンチマークを動かすところに集中。どうやら公開されている去年の構成と似た感じでsupervisorによって指定言語のwebアプリが動いている模様。</p>

<p>ひとまず指標となるベースが必要なので、デフォルトで動いているperl版で計ったら大体こんな感じでした。（Scoreが低い方が良い）</p>

<pre><code>Score:533093
Tickets:922
</code></pre>

<p>webとdbの負荷が両方高い事を確認。</p>

<p>SQLを見たらCOUNTしてるので、slot分割したcounterテーブルかredisを使えば速くなるよね、と指摘。フロントにキャッシュ入れたいので普段使っているVarnishサポートのlacquer gemがあるので、二人はRailsでの再実装を開始。</p>

<p>ちなみにアクセス分布はこんな感じでした。</p>

<p><div><script src='https://gist.github.com/4017160.js?file='></script>
<noscript><pre><code>$grep &quot;POST&quot; access_log  | wc -l
960
$ grep &quot;GET /js/&quot; access_log  | wc -l
1663
$ grep &quot;GET /css/&quot; access_log  | wc -l
1113
$ grep &quot;GET /images/&quot; access_log  | wc -l
539
$ grep &quot;GET /ticket/&quot; access_log  | wc -l
1561
$ grep &quot;GET /artist/&quot; access_log  | wc -l
1534
$ grep &quot;GET / &quot; access_log  | wc -l
1624</code></pre></noscript></div>
</p>

<p>perl版のスコアは分かったので、sinatraフレームワークを使ったruby版に変えてベンチマークを取ってみると、</p>

<pre><code>Score:10755528
Tickets:457
</code></pre>

<p>性能は約半分。遅いのは分かっていたけど、ジョブワーカーとキャッシュを使えば、対応コードの入ったRailsでもなんとかなるという思いで特に意に介さず。</p>

<p>ただ、unicornが50プロセスもあったので、さすがにこれは多いのでベンチをしつつ、いろいろ調整。
結局スコアが一番高かった10プロセスに落ち着く。ついでにrubyのGCを切ったりしたけど、目立った効果はなし。
まだ再実装中で時間もあり、そういえば速いという<a href="http://rubini.us/">rubinius</a>にしたらどうなんだろうと思い、<a href="http://puma.io/">puma</a>も入れてみたけどmysql2 gemが動かず断念。</p>

<p>DBのmy.cnfも見たけど、データ量の割には十分なパラメータだったので、commit毎のflushを変えたぐらい。</p>

<pre><code>innodb_flush_log_at_trx_commit = 0
</code></pre>

<p>また、いつでも使えるようにと、VarnishとRedisもインストールしておく。</p>

<p>次にデプロイ用のテストができるようにテスト用サーバに環境を用意しつつ、capistrano対応。</p>

<h3>後半戦</h3>

<p>再実装はブラウザからの見た目上は前半でほぼ出来上がっていて、後はベンチを通るかを確認して最適化を始めるというシナリオでした。
ところが、全然通らずここからハマることに。。</p>

<p><div><script src='https://gist.github.com/4017170.js?file='></script>
<noscript><pre><code>{&quot;No one tickets are rendered in /ticket/x&quot;:25}
{&quot;No one tickets are rendered in /ticket/x&quot;:20}
{&quot;No one tickets are rendered in /ticket/x&quot;:24}
{&quot;No one tickets are rendered in /ticket/x&quot;:21}
Main Bench:agent bench command execute error, code:1
GET failure response too many, success response: 87%</code></pre></noscript></div>
</p>

<p>表示エラーなのか遅いからなのか、原因が掴めず四苦八苦。
ベンチマークアプリは未公開なのでエラー内容を運営側に聞きつつ、アプリを修正。</p>

<p>その間、リバースプロクシをapacheからnginxに変えてimages/css/js等のstatic contentを直接配信するようにしたけど、あまり効果がなかったので元に戻す。
アプリ修正の度にベンチを走らせるので、別の作業で最適化の確認をとるのが大変でした。チーム内でcontext switchingの問題が発生！</p>

<p>そうこうしていると時間がどんどん流れ、残り1時間を切ったところでRailsを捨てる決断をする。
せめてキャッシュ入れて最適化しよういう事でVarnishを設定し始める。
そうするとスコアはぐんぐん伸びて行き、上位に食い込む。</p>

<pre><code>Score:180724
</code></pre>

<p>さらにESIを使えばもう一段跳ね上がるかもという思いでsinatraにコードを追加してテスト。
しかし、圧倒的に時間が足りず最後の1分半まで粘ったが断念。
最後に再起同時のアプリ起動ができる確認をして終了。</p>

<p>最終スコアは以下の通りでした。</p>

<pre><code>Score:216868
</code></pre>

<p>正直ダメかなと思っていたけど、3位という結果に驚きました。
チューニングが実質1時間未満の割にはまずまずかも知れないけど、残念感の方が強かったですね。</p>

<h3>反省点</h3>

<p>方向性の転換をもっと早く見極めるべきでした。後ちょっと、後ちょっとの思いでずるずる再実装にこだわったのが良くなくて、捨てる勇気を持てたらと。ジョブワーカーやRedis対応の案（とコード）はあったので後半戦直後にやっていたら優勝の可能性はあったかも。。。後の祭りですが。</p>

<p>ともあれ、非常に楽しかったのでまた来年参加してみたいと思います。
運営したNHNの方々、ありがとうございます＆お疲れ様でした！</p>

<h3>おまけ</h3>

<p>帰ってから<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんと平行して#soloconやってました。
直後に<a href="https://github.com/tagomoris/isucon2">公開</a>されたnode.jsで書かれたベンチマークが動かなくてもいろいろ修正したけど、良い勉強になりました。（今は対応版が再アップ済み）
chckerがrails版に対して失敗していたような箇所を見つけたので後日検証してみようと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第4回チューニンガソン(Tuningathon)で優勝してきた]]></title>
    <link href="http://ijin.github.com/blog/2012/07/03/tuningathon4/"/>
    <updated>2012-07-03T01:29:00+09:00</updated>
    <id>http://ijin.github.com/blog/2012/07/03/tuningathon4</id>
    <content type="html"><![CDATA[<p>3回目の参戦となる<a href="http://www.zusaar.com/event/312053">#tuningathon</a>で<a href="https://twitter.com/tnmt">@tnmt</a>さんと共に優勝してきました。</p>

<p>やった事は相方の<a href="http://blog.tnmt.info/2012/07/01/tuningathon4/">ブログに書かれて</a>いるので、補足。</p>

<h3>開演前</h3>

<p>朝起きると、やたらとアラートが飛んでいるので調べると、うるう秒のせいでサーバ達が高負荷状態に。
<a href="https://twitter.com/tnmt">@tnmt</a>さんも同じ原因で障害対応中で待ち合わせ時間には間に合わず、参加が危うい感じ。
自分の方はなんとか片付けて、ぎりぎり開演前に到着。</p>

<h3>お題発表</h3>

<p>前々からやって欲しかったRuby on Rails! で、Refinery CMSというブログのチューニング。<br/>
内心喜びました。</p>

<h3>前半戦</h3>

<p>作業開始前にはまず何よりもバックアップ。
いつでも環境を戻せるようにRailsのフォルダをコピーしてMySQLのdumpを取っておく。</p>

<p>速攻でrbenv + ruby-buildを入れて、rubyの最新バージョン（1.9.3-p194）をインストール。
ビルドの間、まずは環境把握。システムのパッケージ版ruby 1.8.7が入っている事を確認して、
設定フォルダ（tuningathon/config）配下をさらっと目を通す。
my.cnfも見て全然パラメータ設定されてないけど/var/lib/mysqlの容量をチェックしたらほぼ空なので、
ここのチューニングはあまり効果が望めずと判断。やるなら後回し。</p>

<p>ビルドが終えた頃にデフォルト状態のままで動かして、まずベースとなるベンチマーク。
大体こんな感じでした。</p>

<p><div><script src='https://gist.github.com/3038461.js?file='></script>
<noscript><pre><code>12 fetches, 9 max parallel, 45576 bytes, in 10 seconds
3798 mean bytes/connection
1.2 fetches/sec, 4557.6 bytes/sec
msecs/connect: 83.4978 mean, 1000.51 max, 0.044 min
msecs/first-response: 4880.63 mean, 6446.66 max, 2048.37 min
HTTP response codes:
  code 200 -- 12
Score: 2.439 (get=1.200, comment=1.239(2), check=1.000)</code></pre></noscript></div>
</p>

<p>topで見ると完全にrubyがCPUを専有しているので、まずそこから着手することに。</p>

<p>次にdevelopment.rbのキャッシュ周りのパラメータをいじる。
development modeだとソースの変更が即時反映・確認できるよう、毎回クラスをロードしているので遅いんです。</p>

<pre><code>config.cache_classes = true
config.action_controller.perform_caching = true
</code></pre>

<p>これでだけでスコアが倍に。</p>

<pre><code>Score: 5.255 (get=2.900, comment=2.355(3), check=1.000)
</code></pre>

<p>次にruby 1.9.3-p194で動かして計測し、6超え。</p>

<pre><code>Score: 6.102 (get=3.600, comment=2.502(3), check=1.000)
</code></pre>

<p>この頃にやっと相方が合流し、予めGoogle Docsに書いてあった作業ログを共有。
unicornへの置き換えを試しみる事に合意。
設定ファイルを作ってもらっている最中に、jrubyへの置き換えを試すが、
制約上Gemfileの変更が不可だった為、mysql2のgemを外す事ができずDB接続ができなかったので断念。</p>

<p>unicorn単体で動かすと9ぐらい出たので、worker数を変えたり、
unicorn_rails gemからRails 3で推奨されている素のunicorn gemを試したりして、16-21。</p>

<pre><code>Score: 16.205 (get=9.900, comment=6.305(7), check=1.000)
Score: 19.869 (get=13.000, comment=6.869(7), check=1.000)
Score: 21.812 (get=14.000, comment=7.812(8), check=1.000)
</code></pre>

<p>ベンチを取り続けると、commentがどんどん溜まって行くので
viewのrender時間が増えてスコアが落ちたりしたので、毎回DBを初期化したのとRailsを再起動する事によってスコアが安定しだす。</p>

<p>最後にrubyのガベージコレクションを切ったりして、この時点での自己ベストがこんな感じでした。</p>

<pre><code>Score: 29.733 (get=19.000, comment=10.733(11), check=1.000)
</code></pre>

<h3>後半戦</h3>

<p>rubyで出来そうなところは一通りやったので、次は前々から構想していた
Railsの前段にReverse Proxyを置く事にチャレンジ。Varnishを入れて設定し始める。</p>

<p>ちょうどこの時期にTL上で<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんが1000超えのスコアを呟きはじめるので、
なんらかのReverse Proxyを使ったんだと確信。</p>

<p>実はこの時、1000超えのスコアはこちらでも出てたけど、たまに1とか0が出る不安定さだったので、
呟きませんでした。（運営側に計測されなかったのは別port&lt;Varnishデフォルトの6081番>で試していたから）</p>

<p>後は黙々と設定をいじりつつ、相方に念の為DBのテーブルにインデックスを張ってもらったり、
ベンチマークスクリプトを解析してもらって、適切な設定を探るべく試行錯誤な感じ。</p>

<p>16時からの公式計測  段階ではまだスコアが安定してなかったので、ひとまず入賞が確実なrubyオンリーな構成で
2〜3回来るのを確認。その後、終了20分前になんとか安定したので一気にportを置き換えて、
DBを初期化し、railsを再起動して待ちかまえる。次の計測でそれまでトップだった<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんを逆転したようです。</p>

<p>まだ若干時間が余っていたので、Varnishのスレッド数等をいじったりして、17時終了の30秒前に設定を入れて再起動。
後から知ったのですが、この設定がどうやら効いたようで1番最後の計測でさらにスコアが跳ねた模様。
最終的なスコアは「<strong>1351.54</strong>」でした。</p>

<p>ちなみにローカル計測ベスト（3200.23）だとこんな感じだったけど、リモート経由だとネットワーク（？）がボトルネックになって
そこまで出ませんでした。</p>

<p><div><script src='https://gist.github.com/3038562.js?file='></script>
<noscript><pre><code>32005 fetches, 9 max parallel, 1.20014e+08 bytes, in 10.0008 seconds  
3749.86 mean bytes/connection 
3200.23 fetches/sec, 1.20004e+07 bytes/sec  
msecs/connect: 0.249777 mean, 64.577 max, 0.023 min 
msecs/first-response: 2.02407 mean, 1094.87 max, 0.188 min  
15156 bad byte counts
HTTP response codes:  
  code 200 -- 32005    
Score: 3203.969 (get=3200.244, comment=3.725(4), check=1.000)    </code></pre></noscript></div>
</p>

<p>varnishの設定ファイルはこんな感じ。
TTLを強制有効にして、POST後にいかにキャッシュクリアさせるかがポイント。
じゃないと、チェックの成功率の2乗でペナルティが課され、すごい勢いでスコアが減点されます。</p>

<p>/etc/sysconfig/varnish</p>

<h2><div><script src='https://gist.github.com/3038946.js?file='></script>
<noscript><pre><code>NFILES=131072
MEMLOCK=82000
RELOAD_VCL=1

DAEMON_OPTS=&quot;-a :3000 \
             -T :6082 \
             -f /etc/varnish/default.vcl \
             -t 120 \
             -S /etc/varnish/secret \
             -s malloc,64M \
             -p ban_lurker_sleep=0.01 \
             -p thread_pool_stack=262144 \
             -p thread_pool_add_delay=2 \
             -p thread_pools=2 \
             -p thread_pool_min=100 \
             -p thread_pool_max=200&quot;</code></pre></noscript></div>
</h2>

<p>/etc/varnish/default.vcl
<div><script src='https://gist.github.com/3038775.js?file='></script>
<noscript><pre><code># This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.
# 
# Default backend definition.  Set this to point to your content
# server.
# 
backend default {
  .host = &quot;127.0.0.1&quot;;
  .port = &quot;3001&quot;;
}
# 
# Below is a commented-out copy of the default VCL logic.  If you
# redefine any of these subroutines, the built-in logic will be
# appended to your code.
# sub vcl_recv {
#     if (req.restarts == 0) {
# 	if (req.http.x-forwarded-for) {
# 	    set req.http.X-Forwarded-For =
# 		req.http.X-Forwarded-For + &quot;, &quot; + client.ip;
# 	} else {
# 	    set req.http.X-Forwarded-For = client.ip;
# 	}
#     }
#     if (req.request != &quot;GET&quot; &amp;&amp;
#       req.request != &quot;HEAD&quot; &amp;&amp;
#       req.request != &quot;PUT&quot; &amp;&amp;
#       req.request != &quot;POST&quot; &amp;&amp;
#       req.request != &quot;TRACE&quot; &amp;&amp;
#       req.request != &quot;OPTIONS&quot; &amp;&amp;
#       req.request != &quot;DELETE&quot;) {
#         /* Non-RFC2616 or CONNECT which is weird. */
#         return (pipe);
#     }
#     if (req.request != &quot;GET&quot; &amp;&amp; req.request != &quot;HEAD&quot;) {
#         /* We only deal with GET and HEAD by default */
#         return (pass);
#     }
#     if (req.http.Authorization || req.http.Cookie) {
#         /* Not cacheable by default */
#         return (pass);
#     }
#     return (lookup);
# }
sub vcl_recv {
    if (req.request == &quot;POST&quot;) {
	ban(&quot;req.url ~ /&quot;);
	return(pass);
    }
}

# 
# sub vcl_pipe {
#     # Note that only the first request to the backend will have
#     # X-Forwarded-For set.  If you use X-Forwarded-For and want to
#     # have it set for all requests, make sure to have:
#     # set bereq.http.connection = &quot;close&quot;;
#     # here.  It is not set by default as it might break some broken web
#     # applications, like IIS with NTLM authentication.
#     return (pipe);
# }
# 
# sub vcl_pass {
#     return (pass);
# }
# 
# sub vcl_hash {
#     hash_data(req.url);
#     if (req.http.host) {
#         hash_data(req.http.host);
#     } else {
#         hash_data(server.ip);
#     }
#     return (hash);
# }
# 
# sub vcl_hit {
#     return (deliver);
# }
# 
# sub vcl_miss {
#     return (fetch);
# }
# 
# sub vcl_fetch {
#     if (beresp.ttl &lt;= 0s ||
#         beresp.http.Set-Cookie ||
#         beresp.http.Vary == &quot;*&quot;) {
# 		/*
# 		 * Mark as &quot;Hit-For-Pass&quot; for the next 2 minutes
# 		 */
# 		set beresp.ttl = 120 s;
# 		return (hit_for_pass);
#     }
#     return (deliver);
# }
sub vcl_fetch {
    if (beresp.ttl &lt;= 0s) {
	set beresp.ttl = 120s;
    }
}

# 
# sub vcl_deliver {
#     return (deliver);
# }
sub vcl_deliver {
    if (obj.hits &gt; 0) {
        set resp.http.X-Cache = &quot;HIT&quot;;
    } else {
        set resp.http.X-Cache = &quot;MISS&quot;;
    }
}
# 
# sub vcl_error {
#     set obj.http.Content-Type = &quot;text/html; charset=utf-8&quot;;
#     set obj.http.Retry-After = &quot;5&quot;;
#     synthetic {&quot;
# &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
# &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
#  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
# &lt;html&gt;
#   &lt;head&gt;
#     &lt;title&gt;&quot;} + obj.status + &quot; &quot; + obj.response + {&quot;&lt;/title&gt;
#   &lt;/head&gt;
#   &lt;body&gt;
#     &lt;h1&gt;Error &quot;} + obj.status + &quot; &quot; + obj.response + {&quot;&lt;/h1&gt;
#     &lt;p&gt;&quot;} + obj.response + {&quot;&lt;/p&gt;
#     &lt;h3&gt;Guru Meditation:&lt;/h3&gt;
#     &lt;p&gt;XID: &quot;} + req.xid + {&quot;&lt;/p&gt;
#     &lt;hr&gt;
#     &lt;p&gt;Varnish cache server&lt;/p&gt;
#   &lt;/body&gt;
# &lt;/html&gt;
# &quot;};
#     return (deliver);
# }
# 
# sub vcl_init {
# 	return (ok);
# }
# 
# sub vcl_fini {
# 	return (ok);
# }
</code></pre></noscript></div>
</p>

<p>世に出てるの設定例はVarnish 2系が多いので、3系はsyntaxが違うので注意。
コメントアウトされたコードはデフォルト挙動なので、記述されたのとマージされます。
<a href="https://twitter.com/netmarkjp">@netmarkjp</a>さんの<a href="http://netmark.jp/2012/07/tuningathon-4.html">設定</a>はvcl_fetch()内でキャッシュクリアしてるけど、
Varnishの<a href="https://www.varnish-software.com/static/book/_images/vcl.png">フロー</a>的には
一番最初に呼ばれるvcl_recv()内でやった方がより効果的です。</p>

<h3>まとめ</h3>

<ul>
<li>Railsは比較的遅いので、いかにヒットさせないかを考える</li>
<li>でもRubyのチューニングも重要。多分これが2位との差</li>
<li>ベンチマークスクリプトをよく読んで動きやスコアリングを把握する</li>
<li>運営側はチャレンジングな事は先にやっておけと推奨していたけど、まず堅実なチューニングをして最後の冒険が良いかと。</li>
<li>最後まで諦めない気持ち</li>
</ul>


<h3>おまけ</h3>

<p>翌日、出社したら何故か優勝記念と称してMountain Dewが10本贈呈されてましたw</p>

<p><img src="https://lh5.googleusercontent.com/-Ws35zyPY6Ww/UZtL9Wjw9jI/AAAAAAAAAv4/hMp5PFfAFAY/w743-h557-no/IMG_8811.JPG" alt="tuningathon優勝記念" /></p>

<p>最後に運営の皆様、ありがとうございました！</p>
]]></content>
  </entry>
  
</feed>
